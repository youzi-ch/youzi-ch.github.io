[{"url":"/2025/09/15/01-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","content":"<h1 id=\"环境搭建\"><a class=\"markdownIt-Anchor\" href=\"#环境搭建\"></a> 环境搭建</h1>\n<h2 id=\"1-安装jdk17\"><a class=\"markdownIt-Anchor\" href=\"#1-安装jdk17\"></a> 1. 安装JDK17</h2>\n<h3 id=\"11-下载方式1\"><a class=\"markdownIt-Anchor\" href=\"#11-下载方式1\"></a> 1.1 下载方式1</h3>\n<p>通过Java官网下载：<a href=\"https://www.oracle.com/cn/java/technologies/downloads/#java17-windows\">https://www.oracle.com/cn/java/technologies/downloads/#java17-windows</a></p>\n<p>缺点：需要注册和登录Oracle账号；</p>\n<h3 id=\"12-下载方式2\"><a class=\"markdownIt-Anchor\" href=\"#12-下载方式2\"></a> 1.2 下载方式2</h3>\n<p>在头歌教学平台上下载老师提供的版本</p>\n<h3 id=\"13-解压文件到指定目录\"><a class=\"markdownIt-Anchor\" href=\"#13-解压文件到指定目录\"></a> 1.3 解压文件到指定目录</h3>\n<p>记住解压后放置的目录</p>\n<h3 id=\"14-配置环境变量\"><a class=\"markdownIt-Anchor\" href=\"#14-配置环境变量\"></a> 1.4 配置环境变量</h3>\n<h4 id=\"1配置java_home解压后的目录\"><a class=\"markdownIt-Anchor\" href=\"#1配置java_home解压后的目录\"></a> 1）配置JAVA_HOME：解压后的目录</h4>\n<h4 id=\"2配置pathjava_homebin\"><a class=\"markdownIt-Anchor\" href=\"#2配置pathjava_homebin\"></a> 2）配置path：%JAVA_HOME%\\bin</h4>\n<h2 id=\"2-安装eclipse-for-jee\"><a class=\"markdownIt-Anchor\" href=\"#2-安装eclipse-for-jee\"></a> 2. 安装Eclipse For JEE</h2>\n<h3 id=\"21下载\"><a class=\"markdownIt-Anchor\" href=\"#21下载\"></a> 2.1下载</h3>\n<p>Eclipse 官网下载：<a href=\"https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2025-09/R/eclipse-jee-2025-09-R-win32-x86_64.zip\">https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2025-09/R/eclipse-jee-2025-09-R-win32-x86_64.zip</a></p>\n<p>注意，最好选择国内镜像，提高下载速度</p>\n<h3 id=\"22-解压\"><a class=\"markdownIt-Anchor\" href=\"#22-解压\"></a> 2.2 解压</h3>\n<p>将下载的压缩文件解压后放置在指定目录</p>\n<h3 id=\"23-运行并配置\"><a class=\"markdownIt-Anchor\" href=\"#23-运行并配置\"></a> 2.3 运行并配置</h3>\n<h4 id=\"1设置workspace工作空间\"><a class=\"markdownIt-Anchor\" href=\"#1设置workspace工作空间\"></a> 1）设置workspace(工作空间)</h4>\n<h4 id=\"2设置字体\"><a class=\"markdownIt-Anchor\" href=\"#2设置字体\"></a> 2）设置字体</h4>\n<h2 id=\"3-安装tomcat-101\"><a class=\"markdownIt-Anchor\" href=\"#3-安装tomcat-101\"></a> 3. 安装Tomcat 10.1</h2>\n<h3 id=\"31-下载\"><a class=\"markdownIt-Anchor\" href=\"#31-下载\"></a> 3.1 下载</h3>\n<p>Tomcat官网，下载路径：<a href=\"https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.46/bin/apache-tomcat-10.1.46.zip\">https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.46/bin/apache-tomcat-10.1.46.zip</a></p>\n<h3 id=\"32-了解tomcat-101的支持情况\"><a class=\"markdownIt-Anchor\" href=\"#32-了解tomcat-101的支持情况\"></a> 3.2 了解Tomcat 10.1的支持情况</h3>\n<table>\n<thead>\n<tr>\n<th>Tomcat版本</th>\n<th>JDK版本</th>\n<th>Servlet版本</th>\n<th>JSP版本</th>\n<th>注解版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>11.0.x</td>\n<td>17 and Later</td>\n<td>6.1</td>\n<td>4.0</td>\n<td>3.0</td>\n</tr>\n<tr>\n<td>10.1.x</td>\n<td>11 and Later</td>\n<td>6.0</td>\n<td>3.1</td>\n<td>2.1</td>\n</tr>\n<tr>\n<td>9.0.x</td>\n<td>8 and Later</td>\n<td>4.0</td>\n<td>2.3</td>\n<td>1.3</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"32-安装\"><a class=\"markdownIt-Anchor\" href=\"#32-安装\"></a> 3.2 安装</h3>\n<h4 id=\"1解压\"><a class=\"markdownIt-Anchor\" href=\"#1解压\"></a> 1）解压</h4>\n<p>将下载的压缩包解压到一个你喜欢的、路径中不包含中文或空格的目录，例如 D:\\apache-tomcat-10.1.155。这就是Tomcat的安装根目录。</p>\n<h4 id=\"2配置环境变量\"><a class=\"markdownIt-Anchor\" href=\"#2配置环境变量\"></a> 2）配置环境变量</h4>\n<p>配置环境变量可以让你在任意位置启动Tomcat。</p>\n<p>新建 CATALINA_HOME 系统变量：你的Tomcat解压目录（例如：D:\\apache-tomcat-10.1.15）</p>\n<p>编辑 Path 变量：%CATALINA_HOME%\\bin</p>\n<p>逐个点击&quot;确定&quot;关闭所有窗口</p>\n<h4 id=\"3运行与验证\"><a class=\"markdownIt-Anchor\" href=\"#3运行与验证\"></a> 3）运行与验证</h4>\n<p>进入Tomcat安装目录，进入bin目录</p>\n<p>找到startup.bat并双击运行，即可看到启动Tomcat服务的日志信息。</p>\n<p>打开浏览器，访问 <a href=\"http://localhost:8080\">http://localhost:8080</a>。如果你能看到Apache Tomcat的默认欢迎页面，恭喜你，安装成功</p>\n<h3 id=\"33-配置\"><a class=\"markdownIt-Anchor\" href=\"#33-配置\"></a> 3.3 配置</h3>\n<h4 id=\"1配置管理用户用于管理后台\"><a class=\"markdownIt-Anchor\" href=\"#1配置管理用户用于管理后台\"></a> 1）配置管理用户（用于管理后台）</h4>\n<p>在 conf 文件夹中，用文本编辑器打开 tomcat-users.xml 文件。在文件末尾的 </tomcat-users> 标签之前，添加以下内容（你可以自定义用户名和密码）：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">role</span> <span class=\"attr\">rolename</span>=<span class=\"string\">&quot;manager-gui&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">role</span> <span class=\"attr\">rolename</span>=<span class=\"string\">&quot;admin-gui&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">username</span>=<span class=\"string\">&quot;你的用户名&quot;</span> <span class=\"attr\">password</span>=<span class=\"string\">&quot;你的密码&quot;</span> <span class=\"attr\">roles</span>=<span class=\"string\">&quot;manager-gui,admin-gui&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>保存文件，并重启Tomcat。之后你可以通过点击欢迎页面上的&quot;Manager App&quot;来登录管理后台。</p>\n<h4 id=\"2控制台中文乱码\"><a class=\"markdownIt-Anchor\" href=\"#2控制台中文乱码\"></a> 2）控制台中文乱码</h4>\n<p>启动Tomcat的命令行窗口可能出现中文乱码。这是因为Tomcat日志输出编码与Windows命令行解码不一致。</p>\n<p>解决方法：进入Tomcat的 conf 文件夹，打开 logging.properties 文件。找到一行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">java.util.logging.ConsoleHandler.encoding = UTF-8</span><br></pre></td></tr></table></figure>\n<p>将其中的 UTF-8 改为 GBK，保存并重启Tomcat即可。</p>\n<h3 id=\"34-eclipse中配置tomcat\"><a class=\"markdownIt-Anchor\" href=\"#34-eclipse中配置tomcat\"></a> 3.4 Eclipse中配置Tomcat</h3>\n<h4 id=\"1-添加-tomcat-服务器运行时环境\"><a class=\"markdownIt-Anchor\" href=\"#1-添加-tomcat-服务器运行时环境\"></a> 1） 添加 Tomcat 服务器运行时环境</h4>\n<ul>\n<li>打开 Eclipse，进入 <strong>Window</strong> -&gt; <strong>Preferences</strong>。</li>\n<li>在左侧树形菜单中，找到 <strong>Server</strong> -&gt; <strong>Runtime Environments</strong>。</li>\n<li>点击 <strong>Add…</strong> 按钮，在弹出的对话框中选择你下载的 Tomcat 版本（例如 “Apache Tomcat v9.0”）。</li>\n<li>点击 <strong>Next</strong>，通过 <strong>Browse…</strong> 指定你的 Tomcat 解压目录。</li>\n<li>选择你系统安装的 <strong>JDK</strong></li>\n<li>点击 <strong>Finish</strong>，然后 <strong>Apply and Close</strong>。</li>\n</ul>\n<h4 id=\"2在-servers-视图中创建新的服务器实例\"><a class=\"markdownIt-Anchor\" href=\"#2在-servers-视图中创建新的服务器实例\"></a> 2）在 Servers 视图中创建新的服务器实例</h4>\n<ul>\n<li>\n<p>如果 Servers 视图未显示，通过 Window -&gt; Show View -&gt; Servers 打开它。</p>\n</li>\n<li>\n<p>在 Servers 视图空白处右键，选择 New -&gt; Server。</p>\n</li>\n<li>\n<p>选择刚才配置的 Tomcat 版本运行时环境。</p>\n</li>\n<li>\n<p>点击 Finish。</p>\n</li>\n</ul>\n<h4 id=\"3-配置-server-locations\"><a class=\"markdownIt-Anchor\" href=\"#3-配置-server-locations\"></a> 3） 配置 Server Locations</h4>\n<ul>\n<li>\n<p>为了让项目直接部署到 Tomcat 安装目录（而非 Eclipse 工作空间元数据目录），需要进行以下设置，这对确保热部署等功能正常工作很重要：</p>\n</li>\n<li>\n<p>在 Servers 视图中的 Tomcat 服务器实例上右键，选择 Properties。</p>\n</li>\n<li>\n<p>查看 General 部分下的 Server Locations。</p>\n</li>\n<li>\n<p>选择 Use Tomcat installation (takes control of Tomcat installation)。<br />\n注意：如果选项灰色不可选：</p>\n</li>\n<li>\n<p>先将服务器下的所有项目移除 (右键项目 -&gt; Remove)。</p>\n</li>\n<li>\n<p>右键服务器选择 Clean。</p>\n</li>\n<li>\n<p>然后双击服务器实例进入 Overview 页面再进行上述设置</p>\n</li>\n</ul>\n<h4 id=\"4其他配置\"><a class=\"markdownIt-Anchor\" href=\"#4其他配置\"></a> 4）其他配置</h4>\n<p>还可以在 <strong>Server Options</strong> 中根据需要进行配置，例如<strong>取消勾选</strong> “Modules auto reload by default” 以防止修改类后服务器自动重启</p>\n<h2 id=\"4-安装maven-39\"><a class=\"markdownIt-Anchor\" href=\"#4-安装maven-39\"></a> 4. 安装Maven 3.9</h2>\n<h3 id=\"41-下载\"><a class=\"markdownIt-Anchor\" href=\"#41-下载\"></a> 4.1 下载</h3>\n<p>官网下载：<a href=\"https://dlcdn.apache.org/maven/maven-3/3.9.11/binaries/apache-maven-3.9.11-bin.zip\">https://dlcdn.apache.org/maven/maven-3/3.9.11/binaries/apache-maven-3.9.11-bin.zip</a></p>\n<h3 id=\"42-安装\"><a class=\"markdownIt-Anchor\" href=\"#42-安装\"></a> 4.2 安装</h3>\n<h4 id=\"1环境准备\"><a class=\"markdownIt-Anchor\" href=\"#1环境准备\"></a> 1）环境准备</h4>\n<p>Maven 本身由 Java 编写，因此需要先确保你的电脑上已安装 JDK (Java Development Kit) 并配置好环境变量。</p>\n<h4 id=\"2解压\"><a class=\"markdownIt-Anchor\" href=\"#2解压\"></a> 2）解压</h4>\n<p>将下载好的 ZIP 压缩包解压到一个没有中文和空格的目录下，例如 D:\\devtools\\apache-maven-3.8.6。这避免了潜在的路径问题。</p>\n<h4 id=\"3配置环境变量\"><a class=\"markdownIt-Anchor\" href=\"#3配置环境变量\"></a> 3）配置环境变量</h4>\n<p>配置环境变量的目的是为了让你能在任何路径下方便地使用 mvn 命令。</p>\n<p>新建 MAVEN_HOME：你的 Maven 解压路径（例如 D:\\devtools\\apache-maven-3.8.6）。</p>\n<p>修改 Path 变量：%MAVEN_HOME%\\bin</p>\n<h4 id=\"4验证安装\"><a class=\"markdownIt-Anchor\" href=\"#4验证安装\"></a> 4）验证安装</h4>\n<p>打开一个新的命令提示符（CMD），输入命令 mvn -v（或 mvn -version）。</p>\n<p>如果安装成功，你会看到类似下面的输出，显示了 Maven、JDK 的版本信息及其安装路径：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Apache Maven 3.9.11 (版本号可能有差异)</span><br><span class=\"line\">Maven home: D:\\devtools\\apache-maven-3.9.11</span><br><span class=\"line\">Java version: 1.8.0_341, vendor: Oracle Corporation, runtime: ...\\jdk1.8.0_341\\jre</span><br><span class=\"line\">Default locale: zh_CN, platform encoding: GBK</span><br><span class=\"line\">OS name: &quot;windows 10&quot;, version: &quot;10.0&quot;, arch: &quot;amd64&quot;, family: &quot;windows&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"43-优化maven配置\"><a class=\"markdownIt-Anchor\" href=\"#43-优化maven配置\"></a> 4.3 优化Maven配置</h3>\n<h4 id=\"1配置本地仓库-local-repository\"><a class=\"markdownIt-Anchor\" href=\"#1配置本地仓库-local-repository\"></a> 1）配置本地仓库 (Local Repository)</h4>\n<p>Maven 的本地仓库是你电脑上的一个目录，用于存储所有项目下载的依赖包（jar 包）。</p>\n<p>默认情况下，它位于 C:\\Users\\你的用户名.m2\\repository。为了避免占用系统盘空间和提高灵活性，我们通常把它改到其他位置。</p>\n<p>在你喜欢的位置创建一个空文件夹作为新的本地仓库，例如 D:\\devtools\\Maven-Repo。</p>\n<p>打开 Maven 解压目录下 conf 文件夹中的 settings.xml 文件（建议用记事本或VSCode等文本编辑器打开）。</p>\n<p>找到 <localRepository> 标签（通常是被注释掉的），在其下方添加一行，指定你的仓库路径：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- localRepository</span></span><br><span class=\"line\"><span class=\"comment\">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class=\"line\"><span class=\"comment\">   |</span></span><br><span class=\"line\"><span class=\"comment\">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class=\"line\"><span class=\"comment\">  --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">localRepository</span>&gt;</span>D:\\devtools\\Maven-Repo<span class=\"tag\">&lt;/<span class=\"name\">localRepository</span>&gt;</span> <span class=\"comment\">&lt;!-- 你的仓库路径 --&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2配置国内镜像-mirror\"><a class=\"markdownIt-Anchor\" href=\"#2配置国内镜像-mirror\"></a> 2）配置国内镜像 (Mirror)</h4>\n<p>从 Maven 中央仓库（位于国外）下载依赖可能会很慢。通过配置国内镜像，可以大幅提升下载速度。阿里云提供了一个常用的公共镜像。</p>\n<p>在同一个 settings.xml 文件中，找到 <mirrors> 标签。在 <mirrors> 标签内，添加如下 <mirror> 配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;mirror&gt;</span><br><span class=\"line\">    &lt;id&gt;nexus-aliyun&lt;/id&gt;</span><br><span class=\"line\">    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class=\"line\">    &lt;name&gt;Nexus aliyun&lt;/name&gt;</span><br><span class=\"line\">    &lt;url&gt;https://maven.aliyun.com/repository/central&lt;/url&gt;</span><br><span class=\"line\">&lt;/mirror&gt;</span><br><span class=\"line\">&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br></pre></td></tr></table></figure>\n<p>表示这个镜像用于替代所有名为 central 的仓库（即Maven中央仓库）。</p>\n<p>保存 settings.xml 文件。</p>\n<h4 id=\"3将配置复制到-m2-目录\"><a class=\"markdownIt-Anchor\" href=\"#3将配置复制到-m2-目录\"></a> 3）将配置复制到 .m2 目录</h4>\n<p>为了确保 Maven 一定能使用到你修改后的配置，可以将 conf/settings.xml 文件复制到你系统用户目录下的 .m2 文件夹中（例如 C:\\Users\\你的用户名.m2\\）。如果 .m2 文件夹不存在，可以先运行一次 mvn 命令（如 mvn help:system）或手动创建。</p>\n<h4 id=\"4maven的简单使用\"><a class=\"markdownIt-Anchor\" href=\"#4maven的简单使用\"></a> 4）Maven的简单使用</h4>\n<p>配置完成后，你就可以体验 Maven 的便捷了。以下是一些常用命令，在项目根目录（包含 pom.xml 的目录）下运行：</p>\n<p>mvn compile：编译项目源代码。</p>\n<p>mvn clean：清理项目，删除 target 目录。</p>\n<p>mvn package：编译并打包项目（生成 jar 或 war 包）。</p>\n<p>mvn test：运行项目中的测试用例。</p>\n<h4 id=\"5注意事项\"><a class=\"markdownIt-Anchor\" href=\"#5注意事项\"></a> 5）注意事项</h4>\n<p>路径问题：Maven 的安装路径和本地仓库路径最好不要包含中文或空格，否则可能导致一些难以预料的问题。</p>\n<p>环境变量生效：修改环境变量后，务必重新打开命令提示符窗口，新的设置才会生效。</p>\n<p>网络问题：即使配置了国内镜像，首次下载依赖时也可能需要一些时间，请耐心等待。</p>\n<h3 id=\"44-eclipse中配置maven\"><a class=\"markdownIt-Anchor\" href=\"#44-eclipse中配置maven\"></a> 4.4 Eclipse中配置Maven</h3>\n<h4 id=\"1在-eclipse-中指定自定义的-maven\"><a class=\"markdownIt-Anchor\" href=\"#1在-eclipse-中指定自定义的-maven\"></a> 1）在 Eclipse 中指定自定义的 Maven</h4>\n<ul>\n<li>\n<p>打开 Eclipse，进入 Window -&gt; Preferences。</p>\n</li>\n<li>\n<p>在左侧目录树中，找到 Maven -&gt; Installations。</p>\n</li>\n<li>\n<p>点击 Add… 按钮，选择你的 Maven 解压目录，然后点击 Finish。</p>\n</li>\n<li>\n<p>勾选你刚刚添加的 Maven，以确保 Eclipse 使用它（关键步骤！）。</p>\n</li>\n</ul>\n<h4 id=\"2在-eclipse-中指定-settingsxml-和本地仓库\"><a class=\"markdownIt-Anchor\" href=\"#2在-eclipse-中指定-settingsxml-和本地仓库\"></a> 2）在 Eclipse 中指定 settings.xml 和本地仓库</h4>\n<ul>\n<li>\n<p>在 Window -&gt; Preferences 中，找到 Maven -&gt; User Settings。</p>\n</li>\n<li>\n<p>点击 Browse… 按钮，选择你刚才修改过的那个 settings.xml 文件。</p>\n</li>\n<li>\n<p>一旦你指定了 settings.xml 文件，Local Repository 的位置会自动更新为该文件中配置的路径。如果 settings.xml 中没有配置，则会显示默认路径。</p>\n</li>\n</ul>\n<h4 id=\"3启用-maven-视图和控制台\"><a class=\"markdownIt-Anchor\" href=\"#3启用-maven-视图和控制台\"></a> 3）启用 Maven 视图和控制台</h4>\n<p>通过 Window -&gt; Show View -&gt; Other… 打开 Maven 相关的视图，如 Maven Repositories（可以查看本地仓库、全局仓库状态），或者确保 Console 视图可见，并可以切换到 Maven Console 以查看 Maven 命令的执行输出。</p>\n<h3 id=\"45-maven入门\"><a class=\"markdownIt-Anchor\" href=\"#45-maven入门\"></a> 4.5 Maven入门</h3>\n<h4 id=\"1概述\"><a class=\"markdownIt-Anchor\" href=\"#1概述\"></a> 1）概述</h4>\n<p>Maven 是一个强大的项目管理和构建自动化工具，主要用于 Java 项目。它的核心功能可以概括为以下几点：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能领域</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">解决的问题</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>构建管理</strong></td>\n<td style=\"text-align:left\">提供了一套标准、统一的项目构建生命周期（清理、编译、测试、打包、部署等）。</td>\n<td style=\"text-align:left\">告别手动执行 <code>javac</code>、<code>jar</code> 等命令，实现一键式构建。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>依赖管理</strong></td>\n<td style=\"text-align:left\">自动下载、管理项目所依赖的第三方库（JAR 文件）及其传递性依赖。</td>\n<td style=\"text-align:left\">解决令人头疼的“Jar Hell”问题，无需再手动搜索和添加 JAR 包。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>项目信息管理</strong></td>\n<td style=\"text-align:left\">通过一个中心文件（<code>pom.xml</code>）管理项目描述、开发者、许可证、项目报告等元数据。</td>\n<td style=\"text-align:left\">项目结构清晰标准化，便于理解和维护。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2优势\"><a class=\"markdownIt-Anchor\" href=\"#2优势\"></a> 2）优势</h4>\n<ul>\n<li><strong>标准化与一致性</strong>：所有 Maven 项目都遵循相同的目录结构，这让开发者能快速熟悉任何新项目。</li>\n<li><strong>依赖管理</strong>：这是 Maven 最受欢迎的特性。它极大地简化了库的管理，自动处理依赖之间的冲突。</li>\n<li><strong>丰富的插件生态系统</strong>：Maven 的核心其实很小，它的所有功能都通过插件实现，社区提供了大量插件来支持各种任务（如编译、测试、打包、部署、生成站点文档等）。</li>\n<li><strong>强大的继承和聚合</strong>：支持多模块项目管理，非常适合大型项目和微服务架构。</li>\n</ul>\n<h4 id=\"3核心概念pomproject-object-model\"><a class=\"markdownIt-Anchor\" href=\"#3核心概念pomproject-object-model\"></a> 3）核心概念：POM（Project Object Model）</h4>\n<p>POM 是 Maven 的灵魂，它是一个名为 <code>pom.xml</code> 的 XML 文件，包含了项目的一切配置信息。</p>\n<p>一个简单的pom.xml示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 </span><br><span class=\"line\">         http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 模型版本 --&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 项目坐标 (GAV) - 项目的唯一标识符 --&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.example&lt;/groupId&gt;    &lt;!-- 公司或组织域名反写 --&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;my-web-app&lt;/artifactId&gt; &lt;!-- 项目名 --&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;   &lt;!-- 版本号 --&gt;</span><br><span class=\"line\">    &lt;packaging&gt;war&lt;/packaging&gt;          &lt;!-- 打包方式 (jar, war, pom) --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 项目属性 --&gt;</span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;</span><br><span class=\"line\">        &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 项目依赖 --&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;4.13.2&lt;/version&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;/scope&gt; &lt;!-- 依赖范围：只在测试时使用 --&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;4.0.1&lt;/version&gt;</span><br><span class=\"line\">            &lt;scope&gt;provided&lt;/scope&gt; &lt;!-- 依赖范围：由容器（如Tomcat）提供 --&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 构建配置 --&gt;</span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;source&gt;11&lt;/source&gt;</span><br><span class=\"line\">                    &lt;target&gt;11&lt;/target&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4项目坐标\"><a class=\"markdownIt-Anchor\" href=\"#4项目坐标\"></a> 4）项目坐标</h4>\n<p>这是 Maven 世界的“身份证”，通过三个要素唯一确定一个项目或库：</p>\n<ul>\n<li>groupId**：定义项目所属的实际项目或组织（例如：<code>org.apache.maven</code>, <code>org.springframework.boot</code>）。</li>\n<li><strong>artifactId</strong>：定义实际项目中的一个模块。</li>\n<li><strong>version</strong>：定义项目的当前版本（例如：<code>1.0.0</code>, <code>2.5.4</code>）。<code>-SNAPSHOT</code> 后缀表示这是一个开发中的快照版本。</li>\n</ul>\n<h4 id=\"5maven-仓库repository\"><a class=\"markdownIt-Anchor\" href=\"#5maven-仓库repository\"></a> 5）Maven 仓库（Repository）</h4>\n<p>Maven 通过仓库来统一管理所有依赖和插件，分为三类：</p>\n<ol>\n<li><strong>本地仓库（Local Repository）</strong>：\n<ul>\n<li>位于你本机上的一个目录（默认是 <code>~/.m2/repository</code>）。</li>\n<li>Maven 会优先从这里查找依赖。如果找不到，才会去远程仓库下载并缓存到这里。</li>\n</ul>\n</li>\n<li><strong>中央仓库（Central Repository）</strong>：\n<ul>\n<li>由 Maven 社区维护的默认远程仓库，包含了绝大多数流行的开源库。</li>\n<li>无需特殊配置，Maven 默认就会从这里下载。</li>\n</ul>\n</li>\n<li><strong>远程仓库（Remote Repository）/ 私有仓库</strong>：\n<ul>\n<li>公司或组织内部搭建的仓库（如 Nexus、Artifactory）。</li>\n<li>用于部署公司内部的私有依赖，或者作为中央仓库的代理缓存以加速下载。</li>\n</ul>\n</li>\n</ol>\n<p><strong>依赖解析过程</strong>：当你在 POM 中声明一个依赖后，Maven 会按 <strong>本地仓库 → 远程/私有仓库 → 中央仓库</strong> 的顺序去查找并下载所需的 JAR 文件。</p>\n<h4 id=\"6maven-依赖机制\"><a class=\"markdownIt-Anchor\" href=\"#6maven-依赖机制\"></a> 6）Maven 依赖机制</h4>\n<p>依赖范围（Scope）</p>\n<p><code>&lt;scope&gt;</code> 标签用来控制依赖在哪个阶段有效，非常重要。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Scope</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>compile</strong></td>\n<td style=\"text-align:left\"><strong>默认值</strong>。在整个项目生命周期（编译、测试、运行）都有效。</td>\n<td style=\"text-align:left\">Spring Core, Lombok</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>provided</strong></td>\n<td style=\"text-align:left\">表示 JDK 或容器（如 Tomcat）在运行时已提供此依赖，无需打包。</td>\n<td style=\"text-align:left\">Servlet API, JSP API</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>runtime</strong></td>\n<td style=\"text-align:left\">编译时不需要，但在运行时需要。</td>\n<td style=\"text-align:left\">JDBC 驱动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>test</strong></td>\n<td style=\"text-align:left\">只在测试阶段（编译和运行测试代码）需要。</td>\n<td style=\"text-align:left\">JUnit, Mockito</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>system</strong></td>\n<td style=\"text-align:left\">与 <code>provided</code> 类似，但必须通过 <code>systemPath</code> 显式指定本地路径。</td>\n<td style=\"text-align:left\"><strong>一般不推荐使用</strong></td>\n</tr>\n</tbody>\n</table>\n<p>传递性依赖</p>\n<p>Maven 会自动引入你声明的依赖所依赖的其他库（传递性依赖）。例如，你声明了依赖 A，而 A 又依赖 B 和 C，那么 Maven 会自动把 B 和 C 也加入到你的项目中。</p>\n<h4 id=\"7maven-构建生命周期\"><a class=\"markdownIt-Anchor\" href=\"#7maven-构建生命周期\"></a> 7）Maven 构建生命周期</h4>\n<p>Maven 基于构建生命周期（Build Lifecycle）的核心概念，生命周期由多个阶段（phase）组成。最常用的生命周期是 <code>default</code>，它负责项目的编译、测试和打包。</p>\n<p><strong>常用命令（实则是生命周期阶段）</strong>：</p>\n<ul>\n<li><code>mvn clean</code>：运行 <code>clean</code> 生命周期的清理阶段，删除 <code>target</code> 目录。</li>\n<li><code>mvn compile</code>：编译主项目的源代码。</li>\n<li><code>mvn test</code>：运行测试用例。</li>\n<li><code>mvn package</code>：将编译后的代码打包成可分发格式（如 JAR, WAR）。</li>\n<li><code>mvn install</code>：将打包好的文件安装到<strong>本地仓库</strong>，供其他本地项目依赖。</li>\n<li><code>mvn deploy</code>：将最终的包复制到<strong>远程仓库</strong>，供其他开发者或项目使用。</li>\n</ul>\n<p><strong>这些命令是连续的</strong>。例如，当你执行 <code>mvn package</code> 时，Maven 会先执行 <code>validate</code>, <code>compile</code>, <code>test</code> 等所有位于 <code>package</code> 之前的阶段。</p>\n<h4 id=\"8标准项目目录结构\"><a class=\"markdownIt-Anchor\" href=\"#8标准项目目录结构\"></a> 8）标准项目目录结构</h4>\n<p>Maven 强制约定了一个标准的目录结构，这保证了所有 Maven 项目都遵循统一的布局。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">my-project（项目根目录）</span><br><span class=\"line\">│</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   ├── main</span><br><span class=\"line\">│   │   ├── java         # 项目主 Java 源代码</span><br><span class=\"line\">│   │   ├── resources    # 项目主资源文件（配置文件、属性文件等）</span><br><span class=\"line\">│   │   └── webapp       # Web 应用主目录（对于 WAR 项目，包含 WEB-INF/, web.xml）</span><br><span class=\"line\">│   └── test</span><br><span class=\"line\">│       ├── java         # 测试 Java 源代码（如 JUnit 测试）</span><br><span class=\"line\">│       └── resources    # 测试资源文件</span><br><span class=\"line\">│</span><br><span class=\"line\">├── target              # Maven 构建输出目录（编译后的类文件、打包的jar/war等）</span><br><span class=\"line\">│</span><br><span class=\"line\">└── pom.xml            # 项目的核心配置文件</span><br></pre></td></tr></table></figure>\n"},{"title":"GUI编程-续集1","url":"/2025/01/17/GUI%E7%BC%96%E7%A8%8B-%E7%BB%AD%E9%9B%861/","content":""},{"url":"/2025/05/17/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E5%A5%97%E9%A4%90%E7%AE%A1%E7%90%86/","content":"<p>完成套餐管理模块所有业务功能，包括：</p>\n<ul>\n<li>新增套餐</li>\n<li>套餐分页查询</li>\n<li>删除套餐</li>\n<li>修改套餐</li>\n<li>起售停售套餐</li>\n</ul>\n<p>要求：</p>\n<ol>\n<li>根据产品原型进行需求分析，分析出业务规则</li>\n<li>设计接口</li>\n<li>梳理表之间的关系（分类表、菜品表、套餐表、口味表、套餐菜品关系表）</li>\n<li>根据接口设计进行代码实现</li>\n<li>分别通过swagger接口文档和前后端联调进行功能测试</li>\n</ol>\n"},{"url":"/2025/05/17/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E5%A5%97%E9%A4%90%E7%AE%A1%E7%90%86%20-%20%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88/","content":"<h2 id=\"1-新增套餐\"><a class=\"markdownIt-Anchor\" href=\"#1-新增套餐\"></a> 1. 新增套餐</h2>\n<h3 id=\"11-需求分析和设计\"><a class=\"markdownIt-Anchor\" href=\"#11-需求分析和设计\"></a> 1.1 需求分析和设计</h3>\n<p>产品原型：</p>\n<p><img src=\"assets/image-20221018135930842.png\" alt=\"image-20221018135930842\" /></p>\n<p><img src=\"assets/image-20221018140833345.png\" alt=\"image-20221018140833345\" /></p>\n<p>业务规则：</p>\n<ul>\n<li>套餐名称唯一</li>\n<li>套餐必须属于某个分类</li>\n<li>套餐必须包含菜品</li>\n<li>名称、分类、价格、图片为必填项</li>\n<li>添加菜品窗口需要根据分类类型来展示菜品</li>\n<li>新增的套餐默认为停售状态</li>\n</ul>\n<p>接口设计（共涉及到4个接口）：</p>\n<ul>\n<li>根据类型查询分类（已完成）</li>\n<li>根据分类id查询菜品</li>\n<li>图片上传（已完成）</li>\n<li>新增套餐</li>\n</ul>\n<p><img src=\"assets/image-20221018141521068.png\" alt=\"image-20221018141521068\" /></p>\n<p><img src=\"assets/image-20221018141606787.png\" alt=\"image-20221018141606787\" /></p>\n<p>数据库设计：</p>\n<p>setmeal表为套餐表，用于存储套餐的信息。具体表结构如下：</p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>数据类型</th>\n<th>说明</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>bigint</td>\n<td>主键</td>\n<td>自增</td>\n</tr>\n<tr>\n<td>name</td>\n<td>varchar(32)</td>\n<td>套餐名称</td>\n<td>唯一</td>\n</tr>\n<tr>\n<td>category_id</td>\n<td>bigint</td>\n<td>分类id</td>\n<td>逻辑外键</td>\n</tr>\n<tr>\n<td>price</td>\n<td>decimal(10,2)</td>\n<td>套餐价格</td>\n<td></td>\n</tr>\n<tr>\n<td>image</td>\n<td>varchar(255)</td>\n<td>图片路径</td>\n<td></td>\n</tr>\n<tr>\n<td>description</td>\n<td>varchar(255)</td>\n<td>套餐描述</td>\n<td></td>\n</tr>\n<tr>\n<td>status</td>\n<td>int</td>\n<td>售卖状态</td>\n<td>1起售 0停售</td>\n</tr>\n<tr>\n<td>create_time</td>\n<td>datetime</td>\n<td>创建时间</td>\n<td></td>\n</tr>\n<tr>\n<td>update_time</td>\n<td>datetime</td>\n<td>最后修改时间</td>\n<td></td>\n</tr>\n<tr>\n<td>create_user</td>\n<td>bigint</td>\n<td>创建人id</td>\n<td></td>\n</tr>\n<tr>\n<td>update_user</td>\n<td>bigint</td>\n<td>最后修改人id</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>setmeal_dish表为套餐菜品关系表，用于存储套餐和菜品的关联关系。具体表结构如下：</p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>数据类型</th>\n<th>说明</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>bigint</td>\n<td>主键</td>\n<td>自增</td>\n</tr>\n<tr>\n<td>setmeal_id</td>\n<td>bigint</td>\n<td>套餐id</td>\n<td>逻辑外键</td>\n</tr>\n<tr>\n<td>dish_id</td>\n<td>bigint</td>\n<td>菜品id</td>\n<td>逻辑外键</td>\n</tr>\n<tr>\n<td>name</td>\n<td>varchar(32)</td>\n<td>菜品名称</td>\n<td>冗余字段</td>\n</tr>\n<tr>\n<td>price</td>\n<td>decimal(10,2)</td>\n<td>菜品单价</td>\n<td>冗余字段</td>\n</tr>\n<tr>\n<td>copies</td>\n<td>int</td>\n<td>菜品份数</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"12-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#12-代码实现\"></a> 1.2 代码实现</h3>\n<h4 id=\"121-dishcontroller\"><a class=\"markdownIt-Anchor\" href=\"#121-dishcontroller\"></a> 1.2.1 DishController</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据分类id查询菜品</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> categoryId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/list&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;根据分类id查询菜品&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result&lt;List&lt;Dish&gt;&gt; <span class=\"title function_\">list</span><span class=\"params\">(Long categoryId)</span>&#123;</span><br><span class=\"line\">    List&lt;Dish&gt; list = dishService.list(categoryId);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result.success(list);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"122-dishservice\"><a class=\"markdownIt-Anchor\" href=\"#122-dishservice\"></a> 1.2.2 DishService</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据分类id查询菜品</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> categoryId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">List&lt;Dish&gt; <span class=\"title function_\">list</span><span class=\"params\">(Long categoryId)</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"123-dishserviceimpl\"><a class=\"markdownIt-Anchor\" href=\"#123-dishserviceimpl\"></a> 1.2.3 DishServiceImpl</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据分类id查询菜品</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> categoryId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Dish&gt; <span class=\"title function_\">list</span><span class=\"params\">(Long categoryId)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Dish</span> <span class=\"variable\">dish</span> <span class=\"operator\">=</span> Dish.builder()</span><br><span class=\"line\">        .categoryId(categoryId)</span><br><span class=\"line\">        .status(StatusConstant.ENABLE)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dishMapper.list(dish);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"124-dishmapper\"><a class=\"markdownIt-Anchor\" href=\"#124-dishmapper\"></a> 1.2.4 DishMapper</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 动态条件查询菜品</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dish</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">List&lt;Dish&gt; <span class=\"title function_\">list</span><span class=\"params\">(Dish dish)</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"125-dishmapperxml\"><a class=\"markdownIt-Anchor\" href=\"#125-dishmapperxml\"></a> 1.2.5 DishMapper.xml</h4>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;Dish&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;Dish&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from dish</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;name != null&quot;</span>&gt;</span></span><br><span class=\"line\">            and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;categoryId != null&quot;</span>&gt;</span></span><br><span class=\"line\">            and category_id = #&#123;categoryId&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;status != null&quot;</span>&gt;</span></span><br><span class=\"line\">            and status = #&#123;status&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">    order by create_time desc</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"126-setmealcontroller\"><a class=\"markdownIt-Anchor\" href=\"#126-setmealcontroller\"></a> 1.2.6 SetmealController</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 套餐管理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/admin/setmeal&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Api(tags = &quot;套餐相关接口&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SetmealController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SetmealService setmealService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增套餐</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> setmealDTO</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;新增套餐&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">save</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> SetmealDTO setmealDTO)</span> &#123;</span><br><span class=\"line\">        setmealService.saveWithDish(setmealDTO);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"127-setmealservice\"><a class=\"markdownIt-Anchor\" href=\"#127-setmealservice\"></a> 1.2.7 SetmealService</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SetmealService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增套餐，同时需要保存套餐和菜品的关联关系</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> setmealDTO</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">saveWithDish</span><span class=\"params\">(SetmealDTO setmealDTO)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"128-setmealserviceimpl\"><a class=\"markdownIt-Anchor\" href=\"#128-setmealserviceimpl\"></a> 1.2.8 SetmealServiceImpl</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 套餐业务实现</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SetmealServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SetmealService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SetmealMapper setmealMapper;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SetmealDishMapper setmealDishMapper;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DishMapper dishMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增套餐，同时需要保存套餐和菜品的关联关系</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> setmealDTO</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Transactional</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveWithDish</span><span class=\"params\">(SetmealDTO setmealDTO)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Setmeal</span> <span class=\"variable\">setmeal</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Setmeal</span>();</span><br><span class=\"line\">        BeanUtils.copyProperties(setmealDTO, setmeal);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//向套餐表插入数据</span></span><br><span class=\"line\">        setmealMapper.insert(setmeal);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取生成的套餐id</span></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">setmealId</span> <span class=\"operator\">=</span> setmeal.getId();</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;SetmealDish&gt; setmealDishes = setmealDTO.getSetmealDishes();</span><br><span class=\"line\">        setmealDishes.forEach(setmealDish -&gt; &#123;</span><br><span class=\"line\">            setmealDish.setSetmealId(setmealId);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//保存套餐和菜品的关联关系</span></span><br><span class=\"line\">        setmealDishMapper.insertBatch(setmealDishes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"129-setmealmapper\"><a class=\"markdownIt-Anchor\" href=\"#129-setmealmapper\"></a> 1.2.9 SetmealMapper</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增套餐</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> setmeal</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@AutoFill(OperationType.INSERT)</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(Setmeal setmeal)</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1210-setmealmapperxml\"><a class=\"markdownIt-Anchor\" href=\"#1210-setmealmapperxml\"></a> 1.2.10 SetmealMapper.xml</h4>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insert&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;Setmeal&quot;</span> <span class=\"attr\">useGeneratedKeys</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">keyProperty</span>=<span class=\"string\">&quot;id&quot;</span>&gt;</span></span><br><span class=\"line\">    insert into setmeal</span><br><span class=\"line\">    (category_id, name, price, status, description, image, create_time, update_time, create_user, update_user)</span><br><span class=\"line\">    values (#&#123;categoryId&#125;, #&#123;name&#125;, #&#123;price&#125;, #&#123;status&#125;, #&#123;description&#125;, #&#123;image&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;,</span><br><span class=\"line\">    #&#123;createUser&#125;, #&#123;updateUser&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1211-setmealdishmapper\"><a class=\"markdownIt-Anchor\" href=\"#1211-setmealdishmapper\"></a> 1.2.11 SetmealDishMapper</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量保存套餐和菜品的关联关系</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> setmealDishes</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">insertBatch</span><span class=\"params\">(List&lt;SetmealDish&gt; setmealDishes)</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1212-setmealdishmapperxml\"><a class=\"markdownIt-Anchor\" href=\"#1212-setmealdishmapperxml\"></a> 1.2.12 SetmealDishMapper.xml</h4>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insertBatch&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">    insert into setmeal_dish</span><br><span class=\"line\">    (setmeal_id,dish_id,name,price,copies)</span><br><span class=\"line\">    values</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;setmealDishes&quot;</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;sd&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;,&quot;</span>&gt;</span></span><br><span class=\"line\">        (#&#123;sd.setmealId&#125;,#&#123;sd.dishId&#125;,#&#123;sd.name&#125;,#&#123;sd.price&#125;,#&#123;sd.copies&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"13-功能测试\"><a class=\"markdownIt-Anchor\" href=\"#13-功能测试\"></a> 1.3 功能测试</h3>\n<p>略</p>\n<h2 id=\"2-套餐分页查询\"><a class=\"markdownIt-Anchor\" href=\"#2-套餐分页查询\"></a> 2. 套餐分页查询</h2>\n<h3 id=\"21-需求分析和设计\"><a class=\"markdownIt-Anchor\" href=\"#21-需求分析和设计\"></a> 2.1 需求分析和设计</h3>\n<p>产品原型：</p>\n<p><img src=\"assets/image-20221018152429246.png\" alt=\"image-20221018152429246\" /></p>\n<p>业务规则：</p>\n<ul>\n<li>根据页码进行分页展示</li>\n<li>每页展示10条数据</li>\n<li>可以根据需要，按照套餐名称、分类、售卖状态进行查询</li>\n</ul>\n<p>接口设计：</p>\n<p><img src=\"assets/image-20221018152731141.png\" alt=\"image-20221018152731141\" /></p>\n<h3 id=\"22-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#22-代码实现\"></a> 2.2 代码实现</h3>\n<h4 id=\"221-setmealcontroller\"><a class=\"markdownIt-Anchor\" href=\"#221-setmealcontroller\"></a> 2.2.1 SetmealController</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> setmealPageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/page&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;分页查询&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result&lt;PageResult&gt; <span class=\"title function_\">page</span><span class=\"params\">(SetmealPageQueryDTO setmealPageQueryDTO)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">PageResult</span> <span class=\"variable\">pageResult</span> <span class=\"operator\">=</span> setmealService.pageQuery(setmealPageQueryDTO);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result.success(pageResult);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"222-setmealservice\"><a class=\"markdownIt-Anchor\" href=\"#222-setmealservice\"></a> 2.2.2 SetmealService</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> setmealPageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">PageResult <span class=\"title function_\">pageQuery</span><span class=\"params\">(SetmealPageQueryDTO setmealPageQueryDTO)</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"223-setmealserviceimpl\"><a class=\"markdownIt-Anchor\" href=\"#223-setmealserviceimpl\"></a> 2.2.3 SetmealServiceImpl</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> setmealPageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> PageResult <span class=\"title function_\">pageQuery</span><span class=\"params\">(SetmealPageQueryDTO setmealPageQueryDTO)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pageNum</span> <span class=\"operator\">=</span> setmealPageQueryDTO.getPage();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pageSize</span> <span class=\"operator\">=</span> setmealPageQueryDTO.getPageSize();</span><br><span class=\"line\"></span><br><span class=\"line\">    PageHelper.startPage(pageNum, pageSize);</span><br><span class=\"line\">    Page&lt;SetmealVO&gt; page = setmealMapper.pageQuery(setmealPageQueryDTO);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PageResult</span>(page.getTotal(), page.getResult());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"224-setmealmapper\"><a class=\"markdownIt-Anchor\" href=\"#224-setmealmapper\"></a> 2.2.4 SetmealMapper</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> setmealPageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">Page&lt;SetmealVO&gt; <span class=\"title function_\">pageQuery</span><span class=\"params\">(SetmealPageQueryDTO setmealPageQueryDTO)</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"225-setmealmapperxml\"><a class=\"markdownIt-Anchor\" href=\"#225-setmealmapperxml\"></a> 2.2.5 SetmealMapper.xml</h4>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pageQuery&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.sky.vo.SetmealVO&quot;</span>&gt;</span></span><br><span class=\"line\">    select</span><br><span class=\"line\">    \ts.*,c.name categoryName</span><br><span class=\"line\">    from</span><br><span class=\"line\">    \tsetmeal s</span><br><span class=\"line\">    left join</span><br><span class=\"line\">    \tcategory c</span><br><span class=\"line\">    on</span><br><span class=\"line\">    \ts.category_id = c.id</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;name != null&quot;</span>&gt;</span></span><br><span class=\"line\">            and s.name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;status != null&quot;</span>&gt;</span></span><br><span class=\"line\">            and s.status = #&#123;status&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;categoryId != null&quot;</span>&gt;</span></span><br><span class=\"line\">            and s.category_id = #&#123;categoryId&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">    order by s.create_time desc</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"23-功能测试\"><a class=\"markdownIt-Anchor\" href=\"#23-功能测试\"></a> 2.3 功能测试</h3>\n<p>略</p>\n<h2 id=\"3-删除套餐\"><a class=\"markdownIt-Anchor\" href=\"#3-删除套餐\"></a> 3. 删除套餐</h2>\n<h3 id=\"31-需求分析和设计\"><a class=\"markdownIt-Anchor\" href=\"#31-需求分析和设计\"></a> 3.1 需求分析和设计</h3>\n<p>产品原型：</p>\n<p><img src=\"assets/image-20221018153756531.png\" alt=\"image-20221018153756531\" /></p>\n<p>业务规则：</p>\n<ul>\n<li>可以一次删除一个套餐，也可以批量删除套餐</li>\n<li>起售中的套餐不能删除</li>\n</ul>\n<p>接口设计：</p>\n<p><img src=\"assets/image-20221018154541067.png\" alt=\"image-20221018154541067\" /></p>\n<h3 id=\"32-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#32-代码实现\"></a> 3.2 代码实现</h3>\n<h4 id=\"321-setmealcontroller\"><a class=\"markdownIt-Anchor\" href=\"#321-setmealcontroller\"></a> 3.2.1 SetmealController</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量删除套餐</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ids</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@DeleteMapping</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;批量删除套餐&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result <span class=\"title function_\">delete</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class=\"line\">    setmealService.deleteBatch(ids);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result.success();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"322-setmealservice\"><a class=\"markdownIt-Anchor\" href=\"#322-setmealservice\"></a> 3.2.2 SetmealService</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量删除套餐</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ids</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">deleteBatch</span><span class=\"params\">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"323-setmealserviceimpl\"><a class=\"markdownIt-Anchor\" href=\"#323-setmealserviceimpl\"></a> 3.2.3 SetmealServiceImpl</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量删除套餐</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ids</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteBatch</span><span class=\"params\">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class=\"line\">    ids.forEach(id -&gt; &#123;</span><br><span class=\"line\">        <span class=\"type\">Setmeal</span> <span class=\"variable\">setmeal</span> <span class=\"operator\">=</span> setmealMapper.getById(id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StatusConstant.ENABLE == setmeal.getStatus())&#123;</span><br><span class=\"line\">            <span class=\"comment\">//起售中的套餐不能删除</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DeletionNotAllowedException</span>(MessageConstant.SETMEAL_ON_SALE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    ids.forEach(setmealId -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">//删除套餐表中的数据</span></span><br><span class=\"line\">        setmealMapper.deleteById(setmealId);</span><br><span class=\"line\">        <span class=\"comment\">//删除套餐菜品关系表中的数据</span></span><br><span class=\"line\">        setmealDishMapper.deleteBySetmealId(setmealId);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"324-setmealmapper\"><a class=\"markdownIt-Anchor\" href=\"#324-setmealmapper\"></a> 3.2.4 SetmealMapper</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据id查询套餐</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Select(&quot;select * from setmeal where id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\">Setmeal <span class=\"title function_\">getById</span><span class=\"params\">(Long id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据id删除套餐</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> setmealId</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Delete(&quot;delete from setmeal where id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">deleteById</span><span class=\"params\">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"325-setmealdishmapper\"><a class=\"markdownIt-Anchor\" href=\"#325-setmealdishmapper\"></a> 3.2.5 SetmealDishMapper</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据套餐id删除套餐和菜品的关联关系</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> setmealId</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Delete(&quot;delete from setmeal_dish where setmeal_id = #&#123;setmealId&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">deleteBySetmealId</span><span class=\"params\">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"33-功能测试\"><a class=\"markdownIt-Anchor\" href=\"#33-功能测试\"></a> 3.3 功能测试</h3>\n<p>略</p>\n<h2 id=\"4-修改套餐\"><a class=\"markdownIt-Anchor\" href=\"#4-修改套餐\"></a> 4. 修改套餐</h2>\n<h3 id=\"41-需求分析和设计\"><a class=\"markdownIt-Anchor\" href=\"#41-需求分析和设计\"></a> 4.1 需求分析和设计</h3>\n<p>产品原型：</p>\n<p><img src=\"assets/image-20221018160214225.png\" alt=\"image-20221018160214225\" /></p>\n<p>接口设计（共涉及到5个接口）：</p>\n<ul>\n<li>根据id查询套餐</li>\n<li>根据类型查询分类（已完成）</li>\n<li>根据分类id查询菜品（已完成）</li>\n<li>图片上传（已完成）</li>\n<li>修改套餐</li>\n</ul>\n<p><img src=\"assets/image-20221018160915177.png\" alt=\"image-20221018160915177\" /></p>\n<p><img src=\"assets/image-20221018160949864.png\" alt=\"image-20221018160949864\" /></p>\n<p><img src=\"assets/image-20221018161046352.png\" alt=\"image-20221018161046352\" /></p>\n<p><img src=\"assets/image-20221018161117780.png\" alt=\"image-20221018161117780\" /></p>\n<p><img src=\"assets/image-20221018161139861.png\" alt=\"image-20221018161139861\" /></p>\n<h3 id=\"42-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#42-代码实现\"></a> 4.2 代码实现</h3>\n<h4 id=\"421-setmealcontroller\"><a class=\"markdownIt-Anchor\" href=\"#421-setmealcontroller\"></a> 4.2.1 SetmealController</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据id查询套餐，用于修改页面回显数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;根据id查询套餐&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result&lt;SetmealVO&gt; <span class=\"title function_\">getById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Long id)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SetmealVO</span> <span class=\"variable\">setmealVO</span> <span class=\"operator\">=</span> setmealService.getByIdWithDish(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result.success(setmealVO);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改套餐</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> setmealDTO</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@PutMapping</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;修改套餐&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result <span class=\"title function_\">update</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> SetmealDTO setmealDTO)</span> &#123;</span><br><span class=\"line\">    setmealService.update(setmealDTO);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result.success();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"422-setmealservice\"><a class=\"markdownIt-Anchor\" href=\"#422-setmealservice\"></a> 4.2.2 SetmealService</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据id查询套餐和关联的菜品数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">SetmealVO <span class=\"title function_\">getByIdWithDish</span><span class=\"params\">(Long id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改套餐</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> setmealDTO</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(SetmealDTO setmealDTO)</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"423-setmealserviceimpl\"><a class=\"markdownIt-Anchor\" href=\"#423-setmealserviceimpl\"></a> 4.2.3 SetmealServiceImpl</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据id查询套餐和套餐菜品关系</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> SetmealVO <span class=\"title function_\">getByIdWithDish</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Setmeal</span> <span class=\"variable\">setmeal</span> <span class=\"operator\">=</span> setmealMapper.getById(id);</span><br><span class=\"line\">    List&lt;SetmealDish&gt; setmealDishes = setmealDishMapper.getBySetmealId(id);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">SetmealVO</span> <span class=\"variable\">setmealVO</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SetmealVO</span>();</span><br><span class=\"line\">    BeanUtils.copyProperties(setmeal, setmealVO);</span><br><span class=\"line\">    setmealVO.setSetmealDishes(setmealDishes);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> setmealVO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改套餐</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> setmealDTO</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(SetmealDTO setmealDTO)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Setmeal</span> <span class=\"variable\">setmeal</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Setmeal</span>();</span><br><span class=\"line\">    BeanUtils.copyProperties(setmealDTO, setmeal);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1、修改套餐表，执行update</span></span><br><span class=\"line\">    setmealMapper.update(setmeal);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//套餐id</span></span><br><span class=\"line\">    <span class=\"type\">Long</span> <span class=\"variable\">setmealId</span> <span class=\"operator\">=</span> setmealDTO.getId();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2、删除套餐和菜品的关联关系，操作setmeal_dish表，执行delete</span></span><br><span class=\"line\">    setmealDishMapper.deleteBySetmealId(setmealId);</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;SetmealDish&gt; setmealDishes = setmealDTO.getSetmealDishes();</span><br><span class=\"line\">    setmealDishes.forEach(setmealDish -&gt; &#123;</span><br><span class=\"line\">        setmealDish.setSetmealId(setmealId);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//3、重新插入套餐和菜品的关联关系，操作setmeal_dish表，执行insert</span></span><br><span class=\"line\">    setmealDishMapper.insertBatch(setmealDishes);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"424-setmealdishmapper\"><a class=\"markdownIt-Anchor\" href=\"#424-setmealdishmapper\"></a> 4.2.4 SetmealDishMapper</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 根据套餐id查询套餐和菜品的关联关系</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> setmealId</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Select(&quot;select * from setmeal_dish where setmeal_id = #&#123;setmealId&#125;&quot;)</span></span><br><span class=\"line\">   List&lt;SetmealDish&gt; <span class=\"title function_\">getBySetmealId</span><span class=\"params\">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"43-功能测试\"><a class=\"markdownIt-Anchor\" href=\"#43-功能测试\"></a> 4.3 功能测试</h3>\n<p>略</p>\n<h2 id=\"5-起售停售套餐\"><a class=\"markdownIt-Anchor\" href=\"#5-起售停售套餐\"></a> 5. 起售停售套餐</h2>\n<h3 id=\"51-需求分析和设计\"><a class=\"markdownIt-Anchor\" href=\"#51-需求分析和设计\"></a> 5.1 需求分析和设计</h3>\n<p>产品原型：</p>\n<p><img src=\"assets/image-20221018163720881.png\" alt=\"image-20221018163720881\" /></p>\n<p>业务规则：</p>\n<ul>\n<li>可以对状态为起售的套餐进行停售操作，可以对状态为停售的套餐进行起售操作</li>\n<li>起售的套餐可以展示在用户端，停售的套餐不能展示在用户端</li>\n<li>起售套餐时，如果套餐内包含停售的菜品，则不能起售</li>\n</ul>\n<p>接口设计：</p>\n<p><img src=\"assets/image-20221018165055208.png\" alt=\"image-20221018165055208\" /></p>\n<h3 id=\"52-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#52-代码实现\"></a> 5.2 代码实现</h3>\n<h4 id=\"521-setmealcontroller\"><a class=\"markdownIt-Anchor\" href=\"#521-setmealcontroller\"></a> 5.2.1 SetmealController</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 套餐起售停售</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> status</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;套餐起售停售&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result <span class=\"title function_\">startOrStop</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer status, Long id)</span> &#123;</span><br><span class=\"line\">    setmealService.startOrStop(status, id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result.success();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"522-setmealservice\"><a class=\"markdownIt-Anchor\" href=\"#522-setmealservice\"></a> 5.2.2 SetmealService</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 套餐起售、停售</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> status</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startOrStop</span><span class=\"params\">(Integer status, Long id)</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"523-setmealserviceimpl\"><a class=\"markdownIt-Anchor\" href=\"#523-setmealserviceimpl\"></a> 5.2.3 SetmealServiceImpl</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 套餐起售、停售</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> status</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startOrStop</span><span class=\"params\">(Integer status, Long id)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//起售套餐时，判断套餐内是否有停售菜品，有停售菜品提示&quot;套餐内包含未启售菜品，无法启售&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(status == StatusConstant.ENABLE)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//select a.* from dish a left join setmeal_dish b on a.id = b.dish_id where b.setmeal_id = ?</span></span><br><span class=\"line\">        List&lt;Dish&gt; dishList = dishMapper.getBySetmealId(id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dishList != <span class=\"literal\">null</span> &amp;&amp; dishList.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            dishList.forEach(dish -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(StatusConstant.DISABLE == dish.getStatus())&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SetmealEnableFailedException</span>(MessageConstant.SETMEAL_ENABLE_FAILED);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Setmeal</span> <span class=\"variable\">setmeal</span> <span class=\"operator\">=</span> Setmeal.builder()</span><br><span class=\"line\">        .id(id)</span><br><span class=\"line\">        .status(status)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\">    setmealMapper.update(setmeal);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"524-dishmapper\"><a class=\"markdownIt-Anchor\" href=\"#524-dishmapper\"></a> 5.2.4 DishMapper</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据套餐id查询菜品</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> setmealId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Select(&quot;select a.* from dish a left join setmeal_dish b on a.id = b.dish_id where b.setmeal_id = #&#123;setmealId&#125;&quot;)</span></span><br><span class=\"line\">List&lt;Dish&gt; <span class=\"title function_\">getBySetmealId</span><span class=\"params\">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"53-功能测试\"><a class=\"markdownIt-Anchor\" href=\"#53-功能测试\"></a> 5.3 功能测试</h3>\n<p>略</p>\n"},{"title":"二叉搜索树中的插入操作","url":"/2024/11/26/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C/","content":"<h1 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h1>\n<p>给定二叉搜索树<a href=\"https://blog.csdn.net/weixin_41811314/article/details/107104079\">BST</a>的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。<br />\n输入数据保证，新值和原始二叉搜索树中的任意节点值都不同。</p>\n<p>示例1</p>\n<blockquote>\n<ul>\n<li>输入：root = [40,20,60,10,30,50,70], val = 25</li>\n<li>输出：[40,20,60,10,30,50,70,null,null,25]</li>\n</ul>\n</blockquote>\n<p>示例2</p>\n<blockquote>\n<ul>\n<li>输入：root = [4,2,7,1,3,null,null,null,null,null,null], val = 5</li>\n<li>输出：[4,2,7,1,3,5]</li>\n</ul>\n</blockquote>\n<p><img src=\"/img/timu/insertbst.jpg\" alt=\"二叉搜索树中的插入操作\" title=\"力扣701-二叉搜索树中的插入操作\" /></p>\n<h2 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\"></a> 提示</h2>\n<ul>\n<li>给定的树上的节点数介于 0 和 10^4 之间</li>\n<li>每个节点都有一个唯一整数值，取值范围从 0 到 10^8</li>\n<li>-10^8 &lt;= val &lt;= 10^8</li>\n<li>新值和原始二叉搜索树中的任意节点值都不同</li>\n</ul>\n<blockquote>\n<p><a href=\"https://leetcode.cn/problems/insert-into-a-binary-search-tree/\">力扣题目链接</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1Et4y1c78Y/?share_source=copy_web&amp;vd_source=fd148478f48deef97bac8ef404e7216f\">《代码随想录》算法公开课</a></p>\n</blockquote>\n<hr />\n<h1 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h1>\n<blockquote>\n<p>首先添加结点的位置为叶子结点（不考虑替换中间结点再构建树）。<br />\n再来考虑截至条件-当遍历到该结点的子节点都为null时即找到了挂载点。<br />\n根据搜索二叉树的特点，即当<code>val</code>大于<code>root</code>结点值时，向右树寻找，当<code>val</code>小于<code>root</code>结点的值时，向左树寻找。<br />\n又因为该题提供的二叉树为搜索二叉树，当找到挂载点是，只需判断该值是否大于<code>pre</code>（为循环条件中存储的挂载点）。</p>\n</blockquote>\n<h2 id=\"迭代法\"><a class=\"markdownIt-Anchor\" href=\"#迭代法\"></a> 迭代法</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">insertIntoBST</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(val);<span class=\"comment\">//当roo为空时，用val值构建结点返回作为头结点</span></span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">newRoot</span> <span class=\"operator\">=</span> root;<span class=\"comment\">//提前存储头结点，作为返回</span></span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">pre</span> <span class=\"operator\">=</span> root;<span class=\"comment\">//存储用于挂载的结点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (root != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            pre = root;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root.val &gt; val) &#123;<span class=\"comment\">//向左树寻找</span></span><br><span class=\"line\">                root = root.left;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.val &lt; val) &#123;<span class=\"comment\">//向右树寻找</span></span><br><span class=\"line\">                root = root.right;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//与pre做大小比较，最后将val构造的结点挂在树下</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pre.val &gt; val) &#123;</span><br><span class=\"line\">            pre.left = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(val);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            pre.right = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> newRoot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"递归法\"><a class=\"markdownIt-Anchor\" href=\"#递归法\"></a> 递归法</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">insertIntoBST</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"comment\">// 如果当前节点为空，也就意味着val找到了合适的位置，此时创建节点直接返回。</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(val);</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.val &lt; val)&#123;</span><br><span class=\"line\">            root.right = insertIntoBST(root.right, val); <span class=\"comment\">// 递归创建右子树</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.val &gt; val)&#123;</span><br><span class=\"line\">            root.left = insertIntoBST(root.left, val); <span class=\"comment\">// 递归创建左子树</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["二叉树"],"tags":["二叉树","Java","搜索二叉树"]},{"title":"修剪二叉搜索树","url":"/2024/11/27/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/","content":"<h1 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h1>\n<p>给定一个二叉搜索树，同时给定最小边界<code>low</code>和最大边界 <code>high</code>。通过修剪二叉搜索树，使得所有节点的值在<code>[low, high]</code>中<code>(high&gt;=low)</code> 。你可能需要改变树的根节点，所以结果应当返回修剪好的二叉搜索树的新的根节点。</p>\n<blockquote>\n<p>示例1</p>\n<ul>\n<li>输入：root = [1,0,2], low = 1, high = 2</li>\n<li>输出：[1,null,2]<br />\n<img src=\"/img/timu/669-1.jpg\" alt=\"修剪二叉树\" title=\"修剪二叉搜索树\" /></li>\n</ul>\n</blockquote>\n<blockquote>\n<p>示例2</p>\n<ul>\n<li>输入：root = [3,0,4,null,2,null,null,1], low = 1, high = 3</li>\n<li>输出：[3,2,null,1]<br />\n<img src=\"/img/timu/669-2.jpg\" alt=\"修剪二叉树\" title=\"修剪二叉搜索树\" /></li>\n</ul>\n</blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV17P41177ud/?share_source=copy_web&amp;vd_source=fd148478f48deef97bac8ef404e7216f\">《代码随想录》算法视频公开课</a></p>\n<p><a href=\"https://leetcode.cn/problems/trim-a-binary-search-tree/description/\">力扣题目链接</a></p>\n<h1 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h1>\n<ul>\n<li>题目所给二叉树为搜索二叉树</li>\n<li>首先判断根结点是否在给定范围内，如果大于给定范围，则返回其根结点的左结点作为输出树的根结点，如果小于给定范围，则返回根结点的右结点作为根结点</li>\n<li>记录当前根结点，先向左树进行遍历剪切</li>\n<li>再次记录根结点，向右树进行遍历剪切</li>\n</ul>\n<h1 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h1>\n<h2 id=\"迭代法\"><a class=\"markdownIt-Anchor\" href=\"#迭代法\"></a> 迭代法</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">trimBST</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        <span class=\"comment\">//首先对根结点进行判断--是否超越给定边界</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(root != <span class=\"literal\">null</span> &amp;&amp; (root.val &lt; low || root.val &gt; high))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//小于则返回根结点的右结点作为边界</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.val &lt; low) root = root.right;</span><br><span class=\"line\">            <span class=\"comment\">//反则返回根结点的左结点</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> root = root.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//记录当前根结点，用于下述的遍历</span></span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">cur</span>  <span class=\"operator\">=</span> root;</span><br><span class=\"line\">        <span class=\"comment\">//遍历左树，寻找是否有需要剪切的结点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(cur.left != <span class=\"literal\">null</span> &amp;&amp; cur.left.val &lt; low)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//进行剪切操作，因为当cur.left.val小于边界时，其左子树全部小于，直接全切了，右树同样操作</span></span><br><span class=\"line\">                cur.left = cur.left.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur = cur.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(cur.right != <span class=\"literal\">null</span> &amp;&amp; cur.right.val &gt; high)&#123;</span><br><span class=\"line\">                cur.right = cur.right.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur = cur.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["二叉树"],"tags":["二叉树","Java","搜索二叉树"]},{"title":"第一个Java程序","url":"/2024/11/26/%E5%85%B6%E4%BB%96/%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F/","content":"<h1 id=\"java简介\"><a class=\"markdownIt-Anchor\" href=\"#java简介\"></a> Java简介</h1>\n<h2 id=\"描述\"><a class=\"markdownIt-Anchor\" href=\"#描述\"></a> 描述</h2>\n<p><code>Java</code>是一门<code>面向对象</code>的编程语言，不仅吸收了<code>C++</code>语言的各种优点，还摒弃了C++里难以理解的<code>多继承</code>、<code>指针</code>等概念。</p>\n<p>因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程。</p>\n<h2 id=\"特性\"><a class=\"markdownIt-Anchor\" href=\"#特性\"></a> 特性</h2>\n<ul>\n<li>简单性、分布式、健壮性、安全性、平台独立</li>\n<li>可移植性、多线程、动态性</li>\n</ul>\n<h2 id=\"java的用途\"><a class=\"markdownIt-Anchor\" href=\"#java的用途\"></a> Java的用途</h2>\n<ul>\n<li>桌面应用程序</li>\n<li>Web应用程序</li>\n<li>分布式系统</li>\n<li>嵌入式系统应用程序</li>\n</ul>\n<h2 id=\"java的发展历程\"><a class=\"markdownIt-Anchor\" href=\"#java的发展历程\"></a> Java的发展历程</h2>\n<blockquote>\n<p>Java最初由<code>Sum</code>公司于1991年开发，最初命名为<code>Oak</code><br />\n后由于名字已被他人使用，将其改为<code>Java</code>并于1995年正式发布<br />\n后Sum公司于2010年被Oracle公司收购，之后Java便由<code>Oracle</code>公司负责维护和版本升级</p>\n</blockquote>\n<hr />\n<h1 id=\"正题步入-第一个java程序\"><a class=\"markdownIt-Anchor\" href=\"#正题步入-第一个java程序\"></a> 正题步入-第一个Java程序</h1>\n<ul>\n<li>代码展示:</li>\n</ul>\n<figure class=\"highlight java\"><figcaption><span>main方法</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hello</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello world!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Java"],"tags":["Java","新手教程"]},{"title":"一维与二维前缀和与差分","url":"/2024/11/29/%E5%85%B6%E4%BB%96/%E4%B8%80%E7%BB%B4%E4%B8%8E%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/","content":"<h1 id=\"什么是前缀和\"><a class=\"markdownIt-Anchor\" href=\"#什么是前缀和\"></a> 什么是前缀和？</h1>\n<h2 id=\"一维数组前缀和\"><a class=\"markdownIt-Anchor\" href=\"#一维数组前缀和\"></a> 一维数组前缀和</h2>\n<p>例如数组nums = [1,2,3,4,5]</p>\n<p>则其前缀和数组为<code>qian = [1,3,6,10,15]</code>，即<code>qian</code>数组的<code>i</code>索引位置处的值为<code>nums</code>数组索引<code>0-i</code>值的和</p>\n<p>则有如下关系：<code>nums[i] = qian[i] - qian[i-1]</code></p>\n<blockquote>\n<p>注：使用该方法有一最大优势便是可以以<code>(O1)</code>的时间复杂度得到某块区间的总和，是典型的牺牲空间换取时间</p>\n</blockquote>\n<h2 id=\"二维数组前缀和\"><a class=\"markdownIt-Anchor\" href=\"#二维数组前缀和\"></a> 二维数组前缀和</h2>\n<h3 id=\"二维数组的应用和计算\"><a class=\"markdownIt-Anchor\" href=\"#二维数组的应用和计算\"></a> 二维数组的应用和计算</h3>\n<p>二维数组前缀和是一种在二维矩阵上进行快速区域求和的技术，它是一维前缀和概念的扩展。在二维数组中，前缀和可以帮助我们快速计算任意子矩阵的元素和，这在处理图像处理或者某些区域查询问题时非常有用。</p>\n<h3 id=\"二维前缀和的定义\"><a class=\"markdownIt-Anchor\" href=\"#二维前缀和的定义\"></a> 二维前缀和的定义</h3>\n<p>二维前缀和是指对于一个给定的二维数组<code>a</code>，我们构建一个新的二维数组<code>sum</code>，其中<code>sum[i][j]</code>表示从<code>a[0][0]</code>到<code>a[i][j]</code>所有元素的和。这样<code>sum</code>数组的每个元素都代表了一个矩形区域内元素的总和。</p>\n<h3 id=\"计算二维前缀和\"><a class=\"markdownIt-Anchor\" href=\"#计算二维前缀和\"></a> 计算二维前缀和</h3>\n<p>计算二维前缀和的过程可以通过动态规划的方式来完成。对于数组<code>a</code>中的每个元素<code>a[i][j]</code>，我们可以根据以下公式来计算<code>sum[i][j]</code></p>\n<blockquote>\n<p>sum[i][j] = sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + a[i][j]</p>\n</blockquote>\n<h3 id=\"使用二维前缀和求子矩阵和\"><a class=\"markdownIt-Anchor\" href=\"#使用二维前缀和求子矩阵和\"></a> 使用二维前缀和求子矩阵和</h3>\n<p>一旦我们计算出了二维前缀和数组<code>sum</code>，我们就可以快速求出任意子矩阵的和。假设我们要求从<code>(x1, y1)</code>到<code>(x2, y2)</code>形成的子矩阵的和，我们可以使用以下公式</p>\n<blockquote>\n<p>subSum = sum[x2][y2] - sum[x1-1][y2] - sum[x2][y1-1] + sum[x1-1][y1-1]</p>\n</blockquote>\n<h3 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PrefixSum</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[][] getPrefixSum(<span class=\"type\">int</span>[][] matrix) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> matrix.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建一个新的二维数组用于存储前缀和</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] prefixSum = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m][n];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算第一行的前缀和</span></span><br><span class=\"line\">        prefixSum[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = matrix[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            prefixSum[<span class=\"number\">0</span>][j] = prefixSum[<span class=\"number\">0</span>][j - <span class=\"number\">1</span>] + matrix[<span class=\"number\">0</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算第一列的前缀和</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">            prefixSum[i][<span class=\"number\">0</span>] = prefixSum[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] + matrix[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算其余位置的前缀和</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">                prefixSum[i][j] = prefixSum[i - <span class=\"number\">1</span>][j] + prefixSum[i][j - <span class=\"number\">1</span>] - prefixSum[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + matrix[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> prefixSum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"差分法\"><a class=\"markdownIt-Anchor\" href=\"#差分法\"></a> 差分法</h1>\n<h2 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\"></a> 定义</h2>\n<p>对于已知有<code>n</code>个元素的一维数列<code>nums</code>，我们可以建立记录它与每项与前一项得差值得差分数组<code>f</code>；显然，<code>f[1] = nums[1] - 0 = nums[1]</code>; 对于整数 <code>i∈[2,n]</code>，我们让<code>f[i]=nums[i]-nums[i-1]</code>。将对<code>nums</code>的一些操作转移至<code>f</code>数列，最终合并<code>f</code>得到<code>nums</code>的一种操作，叫做差分法。</p>\n<h2 id=\"举个栗子\"><a class=\"markdownIt-Anchor\" href=\"#举个栗子\"></a> 举个栗子</h2>\n<ul>\n<li>例如 nums=[3,4,1,5,6,2,7,9]</li>\n<li>即，f=[3,1,-3,4,1,-4,5,-2]<br />\n当我们需要对数组的<code>[1,6]</code>，这个区间的数<code>+1</code>，并求处区间<code>+1</code>后数组的值</li>\n<li>此时，我们只需要对<code>f</code>数组的左边界第<code>1</code>项<code>+1</code>，对<code>f</code>数组的右边界第<code>7</code>项<code>-1</code>，此时<code>f=[4,1,-3,4,1,-4,4,2]</code>，因为第一项<code>+1</code>，导致<code>1-6</code>项的差值都<code>+1</code>了，即完成对给定区间进行<code>+1</code>操作</li>\n</ul>\n<h2 id=\"差分法的用途\"><a class=\"markdownIt-Anchor\" href=\"#差分法的用途\"></a> 差分法的用途</h2>\n<blockquote>\n<ul>\n<li>快速处理区间加减操作</li>\n<li>优化时间复杂度，也是典型的牺牲空间换时间</li>\n<li>对数组f求前缀和即可得到原数组nums</li>\n</ul>\n</blockquote>\n<h2 id=\"代码实现-2\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-2\"></a> 代码实现</h2>\n<h3 id=\"对给定数组求差分数组\"><a class=\"markdownIt-Anchor\" href=\"#对给定数组求差分数组\"></a> 对给定数组求差分数组</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] getDifferenceArray(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] diffArray = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\"></span><br><span class=\"line\">        diffArray[<span class=\"number\">0</span>] = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            diffArray[i] = arr[i] - arr[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> diffArray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对给定数组求差分数组后通过前缀和得到原数组\"><a class=\"markdownIt-Anchor\" href=\"#对给定数组求差分数组后通过前缀和得到原数组\"></a> 对给定数组求差分数组后通过前缀和得到原数组</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] getArray(<span class=\"type\">int</span>[] diffArray) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> diffArray.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] originalArray = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\"></span><br><span class=\"line\">        originalArray[<span class=\"number\">0</span>] = diffArray[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            originalArray[i] = originalArray[i - <span class=\"number\">1</span>] + diffArray[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> originalArray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["前缀和与差分"],"tags":["Java","前缀和","数组","差分"]},{"title":"删除二叉搜索树中的节点","url":"/2024/11/27/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/","content":"<h1 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h1>\n<p>给定一个二叉搜索树的根节点<code>root</code>和一个值<code>key</code>，删除二叉搜索树中的<code>key</code>对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1tP41177us/?share_source=copy_web&amp;vd_source=fd148478f48deef97bac8ef404e7216f\">《代码随想录》算法视频公开课</a></p>\n<p><a href=\"https://leetcode.cn/problems/delete-node-in-a-bst/description/\">力扣题目链接</a></p>\n<blockquote>\n<p>示例1</p>\n<ul>\n<li>输入：root = [5,3,6,2,4,null,7], key = 3</li>\n<li>输出：[5,4,6,2,null,null,7]</li>\n<li>解释：给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它<br />\n图示<br />\n<img src=\"/img/timu/www.jpg\" alt=\"删除二叉搜索树中的节点\" title=\"力扣450-删除二叉搜索树中的节点\" /><br />\n示例2</li>\n<li>输入: root = [5,3,6,2,4,null,7], key = 0</li>\n<li>输出: [5,3,6,2,4,null,7]</li>\n<li>解释: 二叉树不包含值为 0 的节点<br />\n示例3</li>\n<li>输入: root = [], key = 0</li>\n<li>输出: []</li>\n</ul>\n</blockquote>\n<h1 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h1>\n<h2 id=\"删除结点可能出现的五种情况\"><a class=\"markdownIt-Anchor\" href=\"#删除结点可能出现的五种情况\"></a> 删除结点可能出现的五种情况</h2>\n<ol>\n<li>没有找到<code>key</code>对应结点：\n<ul>\n<li>没找到删除的节点，遍历到空节点直接返回了</li>\n</ul>\n</li>\n<li>找到<code>key</code>对应的结点：\n<ul>\n<li><code>key</code>对应结点的左孩子为<code>null</code>，右孩子不为<code>null</code>，则直接返回右孩子</li>\n<li><code>key</code>对应结点的右孩子为<code>null</code>，左孩子不为<code>null</code>，则直接返回左孩子</li>\n<li>删除结点的右孩子为<code>null</code>，左孩子不为<code>null</code>，删除结点，左孩子补位，返回左孩子为根结点</li>\n<li>删除结点的左右孩子结点都不为空，则将删除结点的左子树头结点（左孩子）放到删除节点的右子树的最左面节点的左孩子上，返回删除节点右孩子为新的根节点。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>注意：因为该题所提供的二叉树为搜索二叉树，即删除结点的左子树值皆小于右子树的值，即可将待删结点的左子树置于待删结点的右子树的左叶子结点下。</p>\n</blockquote>\n<p><img src=\"/img/timu/450.%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.gif\" alt=\"450.删除二叉搜索树中的节点\" title=\"450.删除二叉搜索树中的节点\" /></p>\n<h1 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">deleteNode</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    <span class=\"comment\">//当遍历到的结点值为待删结点时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val == key) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (root.left == <span class=\"literal\">null</span>) &#123;<span class=\"comment\">//待删结点的左结点为空，则返回右结点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root.right;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.right == <span class=\"literal\">null</span>) &#123;<span class=\"comment\">//待删结点的右结点为空，则返回左结点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root.left;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//存储待删结点的右子树头结点</span></span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> root.right;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur.left != <span class=\"literal\">null</span>) &#123;<span class=\"comment\">//找到待删结点的左叶子结点，作为待删结点左子树的挂载点</span></span><br><span class=\"line\">          cur = cur.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur.left = root.left;<span class=\"comment\">//挂载待删结点的左子树到待删结点的右子树的左叶子结点下</span></span><br><span class=\"line\">        root = root.right;<span class=\"comment\">//删除待删结点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val &gt; key) root.left = deleteNode(root.left, key);<span class=\"comment\">//当key小于当前结点值时向左树寻找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val &lt; key) root.right = deleteNode(root.right, key);<span class=\"comment\">//当key大于当前结点时向右树寻找</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;<span class=\"comment\">//仍然为传入的root</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["二叉树"],"tags":["二叉树","Java","搜索二叉树"]},{"title":"GUI编程","url":"/2024/12/26/%E7%8B%82%E7%A5%9E%E8%AF%BE%E7%AC%94%E8%AE%B0/GUI%E7%BC%96%E7%A8%8B/","content":"<h1 id=\"gui编程\"><a class=\"markdownIt-Anchor\" href=\"#gui编程\"></a> GUI编程</h1>\n<p>组件:</p>\n<blockquote>\n<p>窗口、弹窗、面板、文本框、列表框、按钮、图片、监听事件、鼠标、键盘事件</p>\n</blockquote>\n<h1 id=\"1-简介\"><a class=\"markdownIt-Anchor\" href=\"#1-简介\"></a> 1、简介</h1>\n<p>GUI的核心技术: swing 、AWT</p>\n<ul>\n<li>\n<p>现在很少使用的原因</p>\n<ol>\n<li>界面不美观</li>\n<li>需要jre环境</li>\n</ol>\n</li>\n<li>\n<p>为什么还要学习？</p>\n<ol>\n<li>GUI是MVC框架的基础，可以了解MVC，了解监听</li>\n<li>可以写一些自己想要的小工具</li>\n<li>以后可能有极小的概率需要去维护swing界面</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"2-awt\"><a class=\"markdownIt-Anchor\" href=\"#2-awt\"></a> 2、AWT</h1>\n<h2 id=\"21-awt介绍\"><a class=\"markdownIt-Anchor\" href=\"#21-awt介绍\"></a> 2.1、AWT介绍</h2>\n<ol>\n<li>包含很多类和接口，可以通过查看源码去了解</li>\n<li>元素：窗口、按钮、文本框…</li>\n<li>java.awt<br />\n<img src=\"/img2/GUI/gui-1.png\" alt=\"GUI\" title=\"gui-1\" /></li>\n</ol>\n<h2 id=\"22-组件与容器\"><a class=\"markdownIt-Anchor\" href=\"#22-组件与容器\"></a> 2.2、组件与容器</h2>\n<h3 id=\"1-frame\"><a class=\"markdownIt-Anchor\" href=\"#1-frame\"></a> 1、Frame</h3>\n<ul>\n<li>创建一个弹窗</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestFrame</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//看源码</span></span><br><span class=\"line\">        <span class=\"type\">Frame</span> <span class=\"variable\">frame</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Frame</span>(<span class=\"string\">&quot;我的第一个窗口&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//可见性</span></span><br><span class=\"line\">        frame.setVisible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//窗口大小</span></span><br><span class=\"line\">        frame.setSize(<span class=\"number\">400</span>,<span class=\"number\">400</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//背景颜色</span></span><br><span class=\"line\">        frame.setBackground(Color.pink);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//弹出初始位置</span></span><br><span class=\"line\">        frame.setLocation(<span class=\"number\">200</span>,<span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//大小固定</span></span><br><span class=\"line\">        frame.setResizable(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图：<br />\n<img src=\"/img2/GUI/gui-2.png\" alt=\"GUI\" title=\"gui-2\" /></p>\n<ul>\n<li>创建多个弹窗</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestFrame2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyFrame</span> <span class=\"variable\">myFrame1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyFrame</span>(<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">200</span>,<span class=\"number\">200</span>,Color.blue);</span><br><span class=\"line\">        <span class=\"type\">MyFrame</span> <span class=\"variable\">myFrame2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyFrame</span>(<span class=\"number\">300</span>,<span class=\"number\">100</span>,<span class=\"number\">200</span>,<span class=\"number\">200</span>,Color.red);</span><br><span class=\"line\">        <span class=\"type\">MyFrame</span> <span class=\"variable\">myFrame3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyFrame</span>(<span class=\"number\">100</span>,<span class=\"number\">300</span>,<span class=\"number\">200</span>,<span class=\"number\">200</span>,Color.pink);</span><br><span class=\"line\">        <span class=\"type\">MyFrame</span> <span class=\"variable\">myFrame4</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyFrame</span>(<span class=\"number\">300</span>,<span class=\"number\">300</span>,<span class=\"number\">200</span>,<span class=\"number\">200</span>,Color.green);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyFrame</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Frame</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">//窗口编号</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyFrame</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> w, <span class=\"type\">int</span> h, Color color)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(<span class=\"string\">&quot;MyFrame&quot;</span>+(++id));</span><br><span class=\"line\">        setBackground(color);</span><br><span class=\"line\">        setBounds(x,y,w,h);</span><br><span class=\"line\">        setVisible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>效果图：<br />\n<img src=\"/img2/GUI/gui-3.png\" alt=\"GUI\" title=\"gui-3\" /></p>\n<blockquote>\n<p>注：发现窗口关不掉，只有停止Java程序才能将其关闭</p>\n</blockquote>\n<h3 id=\"2-面板panel\"><a class=\"markdownIt-Anchor\" href=\"#2-面板panel\"></a> 2、面板Panel</h3>\n<p><strong>解决了关闭窗口的问题</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.WindowAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.WindowEvent;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestPanel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Frame</span> <span class=\"variable\">frame</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Frame</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Panel 可以看成一个空间。但是不能单独存在</span></span><br><span class=\"line\">        <span class=\"type\">Panel</span> <span class=\"variable\">panel</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Panel</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置布局</span></span><br><span class=\"line\">        frame.setLayout(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//坐标</span></span><br><span class=\"line\">        frame.setBounds(<span class=\"number\">300</span>,<span class=\"number\">300</span>,<span class=\"number\">500</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">        frame.setBackground(Color.pink);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Panel设置坐标，相对于Frame</span></span><br><span class=\"line\">        panel.setBounds(<span class=\"number\">50</span>,<span class=\"number\">50</span>,<span class=\"number\">400</span>,<span class=\"number\">400</span>);</span><br><span class=\"line\">        panel.setBackground(Color.green);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.add(panel);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.setVisible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//监听事件，监听窗口关闭事件</span></span><br><span class=\"line\">        frame.addWindowFocusListener(<span class=\"keyword\">new</span> <span class=\"title class_\">WindowAdapter</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">windowClosing</span><span class=\"params\">(WindowEvent e)</span> &#123;</span><br><span class=\"line\">                System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图：<br />\n<img src=\"/img2/GUI/gui-4.png\" alt=\"GUI\" title=\"gui-4\" /></p>\n<h3 id=\"3-布局管理器\"><a class=\"markdownIt-Anchor\" href=\"#3-布局管理器\"></a> 3、布局管理器</h3>\n<h4 id=\"流式布局\"><a class=\"markdownIt-Anchor\" href=\"#流式布局\"></a> 流式布局</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestFlowLayout</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Frame</span> <span class=\"variable\">frame</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Frame</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建三个按钮组件</span></span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">button1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;button1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">button2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;button2&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">button3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;button3&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置流式布局</span></span><br><span class=\"line\">        <span class=\"comment\">// frame.setLayout(new FlowLayout()) ; // 默认居中</span></span><br><span class=\"line\">        <span class=\"comment\">// frame.setLayout(new FlowLayout(FlowLayout.LEFT)); //设置向左</span></span><br><span class=\"line\">        frame.setLayout(<span class=\"keyword\">new</span> <span class=\"title class_\">FlowLayout</span>(FlowLayout.RIGHT)); <span class=\"comment\">//设置向右</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置窗口大小</span></span><br><span class=\"line\">        frame.setSize(<span class=\"number\">400</span>,<span class=\"number\">400</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//添加按钮</span></span><br><span class=\"line\">        frame.add(button1);</span><br><span class=\"line\">        frame.add(button3);</span><br><span class=\"line\">        frame.add(button2);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.setVisible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>效果图：<br />\n<img src=\"/img2/GUI/gui-5.png\" alt=\"GUI\" title=\"gui-5\" /></p>\n<h4 id=\"东南西北中\"><a class=\"markdownIt-Anchor\" href=\"#东南西北中\"></a> 东南西北中</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestBorderLayout</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Frame</span> <span class=\"variable\">frame</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Frame</span>(<span class=\"string\">&quot;TestBorderLayout&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">east</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;east&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">west</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;west&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">south</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;south&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">north</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;north&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">center</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;center&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.add(east, BorderLayout.EAST);</span><br><span class=\"line\">        frame.add(west, BorderLayout.WEST);</span><br><span class=\"line\">        frame.add(south, BorderLayout.SOUTH);</span><br><span class=\"line\">        frame.add(north, BorderLayout.NORTH);</span><br><span class=\"line\">        frame.add(center, BorderLayout.CENTER);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.setVisible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        frame.setSize(<span class=\"number\">300</span>,<span class=\"number\">300</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图：<br />\n<img src=\"/img2/GUI/gui-6.png\" alt=\"GUI\" title=\"gui-6\" /></p>\n<h4 id=\"表格式布局\"><a class=\"markdownIt-Anchor\" href=\"#表格式布局\"></a> 表格式布局</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestGridLayout</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Frame</span> <span class=\"variable\">frame</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Frame</span>(<span class=\"string\">&quot;TestGridLayout&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">button1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;button1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">button2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;button2&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">button3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;button3&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">button4</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;button4&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">button5</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;button5&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">button6</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;button6&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.setLayout(<span class=\"keyword\">new</span> <span class=\"title class_\">GridLayout</span>(<span class=\"number\">3</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.add(button1);</span><br><span class=\"line\">        frame.add(button2);</span><br><span class=\"line\">        frame.add(button3);</span><br><span class=\"line\">        frame.add(button4);</span><br><span class=\"line\">        frame.add(button5);</span><br><span class=\"line\">        frame.add(button6);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.pack(); <span class=\"comment\">//Java函数！</span></span><br><span class=\"line\">        frame.setVisible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图：<br />\n<img src=\"/img2/GUI/gui-7.png\" alt=\"GUI\" title=\"gui-7\" /></p>\n<h4 id=\"小题一道\"><a class=\"markdownIt-Anchor\" href=\"#小题一道\"></a> 小题一道</h4>\n<p>通过对三种布局的使用，使其实现如下图效果：<br />\n<img src=\"/img2/GUI/gui-8.png\" alt=\"GUI\" title=\"gui-8\" /></p>\n<p><strong>分析：</strong><br />\n首先将该图分为上下两个面板</p>\n<p>再将上面板分为左右两个按钮和中间一个面板，其中中间面板可以采用一列两行的表格式布局或者采用上下东南西北中布局中的西东</p>\n<p>再将下面板分为左右两个按钮和中间面板，将中间面板采用表格式布局</p>\n<ul>\n<li><strong>参考答案</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Frame</span> <span class=\"variable\">frame</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Frame</span>();</span><br><span class=\"line\">        frame.setVisible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        frame.setBackground(Color.cyan);</span><br><span class=\"line\">        frame.setLocation(<span class=\"number\">600</span>,<span class=\"number\">600</span>);</span><br><span class=\"line\">        frame.setSize(<span class=\"number\">600</span>,<span class=\"number\">600</span>);</span><br><span class=\"line\">        frame.setLayout(<span class=\"keyword\">new</span> <span class=\"title class_\">GridLayout</span>(<span class=\"number\">2</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//p1为上面板</span></span><br><span class=\"line\">        <span class=\"type\">Panel</span> <span class=\"variable\">p1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Panel</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BorderLayout</span>());</span><br><span class=\"line\">        <span class=\"comment\">//p2为p1中的中间面板-表格式布局</span></span><br><span class=\"line\">        <span class=\"type\">Panel</span> <span class=\"variable\">p2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Panel</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">GridLayout</span>(<span class=\"number\">2</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"comment\">//p3为下面板</span></span><br><span class=\"line\">        <span class=\"type\">Panel</span> <span class=\"variable\">p3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Panel</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BorderLayout</span>());</span><br><span class=\"line\">        <span class=\"comment\">//p4为下面板的中间面板</span></span><br><span class=\"line\">        <span class=\"type\">Panel</span> <span class=\"variable\">p4</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Panel</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">GridLayout</span>(<span class=\"number\">2</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//利用东南西北中布局设置</span></span><br><span class=\"line\">        p1.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;East-1&quot;</span>), BorderLayout.EAST);</span><br><span class=\"line\">        p1.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;West-1&quot;</span>), BorderLayout.WEST);</span><br><span class=\"line\"></span><br><span class=\"line\">        p2.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;p2-btu-1&quot;</span>));</span><br><span class=\"line\">        p2.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;p2-btu-2&quot;</span>));</span><br><span class=\"line\">        p1.add(p2, BorderLayout.CENTER);</span><br><span class=\"line\"></span><br><span class=\"line\">        p3.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;East-2&quot;</span>), BorderLayout.EAST);</span><br><span class=\"line\">        p3.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;West-2&quot;</span>), BorderLayout.WEST);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            p4.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;for-&quot;</span>+i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        p3.add(p4, BorderLayout.CENTER);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.add(p1);</span><br><span class=\"line\">        frame.add(p3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图：<br />\n<img src=\"/img2/GUI/gui-9.png\" alt=\"GUI\" title=\"gui-9\" /></p>\n<h1 id=\"4-事件监听\"><a class=\"markdownIt-Anchor\" href=\"#4-事件监听\"></a> 4、事件监听</h1>\n<p>事件监听：当某个事情发生的时候，干什么？</p>\n<h3 id=\"写一个事件监听-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#写一个事件监听-代码实现\"></a> 写一个事件监听-代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.WindowAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.WindowEvent;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestActionEvent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//点击按钮触发一些事件</span></span><br><span class=\"line\">        <span class=\"type\">Frame</span> <span class=\"variable\">frame</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Frame</span>();</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">button</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//因为addActionListener()需要一个ActionListener，则构造一个ActionListener</span></span><br><span class=\"line\">        <span class=\"type\">MyActionListener</span> <span class=\"variable\">myActionListener</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyActionListener</span>();</span><br><span class=\"line\">        button.addActionListener(myActionListener);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.add(button, BorderLayout.CENTER);</span><br><span class=\"line\">        frame.pack();</span><br><span class=\"line\">        frame.setVisible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//关闭窗体事件</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">windowClose</span><span class=\"params\">(Frame frame)</span>&#123;</span><br><span class=\"line\">        frame.addWindowListener(<span class=\"keyword\">new</span> <span class=\"title class_\">WindowAdapter</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">windowClosing</span><span class=\"params\">(WindowEvent e)</span> &#123;</span><br><span class=\"line\">                System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyActionListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ActionListener</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"41-多个按钮共享一个事件\"><a class=\"markdownIt-Anchor\" href=\"#41-多个按钮共享一个事件\"></a> 4.1、多个按钮，共享一个事件</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionListener;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestActionTwo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//两个按钮  实现同一个监听</span></span><br><span class=\"line\">        <span class=\"comment\">// 开始  停止</span></span><br><span class=\"line\">        <span class=\"type\">Frame</span> <span class=\"variable\">frame</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Frame</span>(<span class=\"string\">&quot;开始-停止&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">button1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;start&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">button2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>(<span class=\"string\">&quot;stop&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//可以显示的定义触发会返回的命令，如果不显示定义，则会走默认的值！</span></span><br><span class=\"line\">        <span class=\"comment\">//可以多个按钮只写一个监听类</span></span><br><span class=\"line\">        button2.setActionCommand(<span class=\"string\">&quot;button2-stop&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">MyMonitor</span> <span class=\"variable\">myMonitor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyMonitor</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        button1.addActionListener(myMonitor);</span><br><span class=\"line\">        button2.addActionListener(myMonitor);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.add(button1, BorderLayout.NORTH);</span><br><span class=\"line\">        frame.add(button2, BorderLayout.SOUTH);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.pack();</span><br><span class=\"line\">        frame.setVisible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyMonitor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ActionListener</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;按钮被点击：msg=&gt;&quot;</span> + e.getActionCommand());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["GUI"],"tags":["Java","贪吃蛇"]},{"title":"LeetCode-不同路径","url":"/2024/12/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/LeetCode-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/","content":"<h1 id=\"题目-不同路径i\"><a class=\"markdownIt-Anchor\" href=\"#题目-不同路径i\"></a> 题目-不同路径I</h1>\n<p>一个机器人位于一个<code>m x n</code>网格的左上角 （起始点在下图中标记为<code>Start</code>）。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为<code>Finish</code>）。<br />\n问总共有多少条不同的路径？<br />\n<img src=\"/img/timu/62-1.png\" alt=\"62-1\" title=\"LeetCode-62\" /></p>\n<p>示例1</p>\n<ul>\n<li>输入：m = 3, n = 7</li>\n<li>输出：28</li>\n</ul>\n<p>示例2</p>\n<ul>\n<li>输入：m = 2, n = 3</li>\n<li>输出：3</li>\n<li>解释： 从左上角开始，总共有 3 条路径可以到达右下角。\n<ol>\n<li>向右 -&gt; 向右 -&gt; 向下</li>\n<li>向右 -&gt; 向下 -&gt; 向右</li>\n<li>向下 -&gt; 向右 -&gt; 向右</li>\n</ol>\n</li>\n</ul>\n<p>示例3</p>\n<ul>\n<li>输入：m = 7, n = 3</li>\n<li>输出：28</li>\n</ul>\n<p>示例4</p>\n<ul>\n<li>输入：m = 3, n = 3</li>\n<li>输出：6</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1Ld4y1k7c6/?vd_source=fd148478f48deef97bac8ef404e7216f\">《代码随想录》算法公开课</a><br />\n<a href=\"https://leetcode.cn/problems/unique-paths-ii/description/\">力扣题目链接</a></p>\n</blockquote>\n<h1 id=\"思路-i\"><a class=\"markdownIt-Anchor\" href=\"#思路-i\"></a> 思路-I</h1>\n<p>首先机械人要到达终点必须要向下走<code>n</code>步，向右走<code>m</code>步，我们将机械人的初始位置表示为<code>(0 , 0)</code>，终点表示为<code>(m-1 , n-1)</code>。</p>\n<h2 id=\"动态规划五步曲-i\"><a class=\"markdownIt-Anchor\" href=\"#动态规划五步曲-i\"></a> 动态规划五步曲-I</h2>\n<ol>\n<li>\n<p>确定<code>dp</code>数组以及下标的含义<br />\n<code>dp[i][j]</code> ：表示从<code>(0 ，0)</code>出发，到<code>(i, j)</code> 有<code>dp[i][j]</code>条不同的路径。</p>\n</li>\n<li>\n<p>确定递推公式<br />\n想要求<code>dp[i][j]</code>，只能有两个方向来推导出来，即从<code>[i][j]</code>位置的上方和左方移动而来，代码表示为<code>dp[i - 1][j]</code>和<code>dp[i][j - 1]</code>。</p>\n</li>\n</ol>\n<p>此时在回顾一下<code>dp[i - 1][j]</code>表示啥，是从<code>(0, 0)</code>的位置到<code>(i - 1, j)</code>有几条路径，<code>dp[i][j - 1]</code>同理。</p>\n<p>那么很自然，<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code>，因为<code>dp[i][j]</code>只有这两个方向过来。</p>\n<ol start=\"3\">\n<li>\n<p>dp数组的初始化<br />\n如何初始化呢，首先<code>dp[i][0]</code>一定都是<code>1</code>，因为从<code>(0, 0)</code>的位置到<code>(i, 0)</code>的路径只有一条，那么<code>dp[0][j]</code>也同理。</p>\n</li>\n<li>\n<p>确定遍历顺序<br />\n这里要看一下递推公式<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code>，<code>dp[i][j]</code>都是从其上方和左方推导而来，那么从左到右一层一层遍历就可以了。</p>\n</li>\n<li>\n<p>举例推导<code>dp</code>数组<br />\n<img src=\"/img/timu/62-2.png\" alt=\"62-2\" title=\"62-2\" /></p>\n</li>\n</ol>\n<h1 id=\"代码实现-i\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-i\"></a> 代码实现-I</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//行列的索引都从0出发，则终点位置索引为[m-1][n-1]</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m][n];</span><br><span class=\"line\">        <span class=\"comment\">//初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; m; i++)dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++)dp[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//因为每次只能向下或向右移动一步，则dp[i][j] 只能来自dp[i][j-1]向右移动一步，或者dp[i-1][j]向下移动一步</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">                dp[i][j] = dp[i-<span class=\"number\">1</span>][j] + dp[i][j-<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"题目-不同路径ii\"><a class=\"markdownIt-Anchor\" href=\"#题目-不同路径ii\"></a> 题目-不同路径II</h1>\n<p>一个机器人位于一个<code>m x n</code>网格的左上角 （起始点在下图中标记为<code>Start</code>）。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为<code>Finish</code>）。现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>\n<blockquote>\n<p>注：网格中的障碍物和空位置分别用<code>1</code>和<code>0</code>来表示。</p>\n</blockquote>\n<p>示例1</p>\n<ul>\n<li>输入：obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]</li>\n<li>输出：2</li>\n<li>解释：3x3 网格的正中间有一个障碍物。从左上角到右下角一共有 2 条不同的路径：\n<ol>\n<li>向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</li>\n<li>向下 -&gt; 向下 -&gt; 向右 -&gt; 向右<br />\n<img src=\"/img/timu/63-1.png\" alt=\"63-1\" title=\"63-1\" /></li>\n</ol>\n</li>\n</ul>\n<p>示例2</p>\n<ul>\n<li>输入：obstacleGrid = [[0,1],[0,0]]</li>\n<li>输出：1</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1Ld4y1k7c6/?vd_source=fd148478f48deef97bac8ef404e7216f\">《代码随想录》算法公开课</a><br />\n<a href=\"https://leetcode.cn/problems/unique-paths-ii/description/\">力扣题目链接</a></p>\n</blockquote>\n<h1 id=\"思路-ii\"><a class=\"markdownIt-Anchor\" href=\"#思路-ii\"></a> 思路-II</h1>\n<p>首先这个题跟不同路径I很相似，则我们定义<code>dp[i][j]</code>为到达<code>(i,j)</code>的路径数，已知有障碍就无法通行，且<code>dp</code>数组会遍历到网格上的每一个点，则我们只需要令以障碍点为终点的路径删去就是没有障碍的路径，在这个思路中我们直接排除了含障碍点的路径。</p>\n<h2 id=\"动态规划五部曲-ii\"><a class=\"markdownIt-Anchor\" href=\"#动态规划五部曲-ii\"></a> 动态规划五部曲-II</h2>\n<ol>\n<li>\n<p>确定<code>dp</code>数组以及下标的含义<br />\n<code>dp[i][j]</code>：表示从<code>(0 ，0)</code>出发，到<code>(i, j)</code>有<code>dp[i][j]</code>条不同的路径。</p>\n</li>\n<li>\n<p>确定递推公式<br />\n递推公式和62.不同路径一样，<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code>。</p>\n</li>\n</ol>\n<blockquote>\n<p>注：但这里需要注意一点，因为有了障碍，<code>(i, j)</code>如果就是障碍的话应该就保持初始状态（初始状态为0）。</p>\n</blockquote>\n<ol start=\"3\">\n<li><code>dp</code>数组如何初始化<br />\n在<code>(i,0)</code>不是障碍物之前，其路径数都是<code>1</code>，当<code>(i,0)</code>位置为障碍物之后，其路径数都为<code>0</code>.</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; m &amp;&amp; obstacleGrid[i][<span class=\"number\">0</span>] != <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">    dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;   </span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; n &amp;&amp; obstacleGrid[<span class=\"number\">0</span>][j] != <span class=\"number\">1</span>; j++)&#123;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注：注意代码里for循环的终止条件，一旦遇obstacleGrid[i][0] == 1的情况就停止dp[i][0]的赋值1的操作，dp[0][j]同理</strong></p>\n</blockquote>\n<ol start=\"4\">\n<li>\n<p>确定遍历顺序<br />\n从递归公式<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1] </code>中可以看出，一定是从左到右一层一层遍历，这样保证推导<code>dp[i][j]</code>的时候<code>dp[i - 1][j]</code>和<code>dp[i][j - 1]</code>一定是有数值。</p>\n</li>\n<li>\n<p>举例推导<code>dp</code>数组<br />\n自己想象</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePathsWithObstacles</span><span class=\"params\">(<span class=\"type\">int</span>[][] obstacleGrid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> obstacleGrid.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> obstacleGrid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m][n];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obstacleGrid[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>] == <span class=\"number\">1</span> || obstacleGrid[<span class=\"number\">0</span>][<span class=\"number\">0</span>] == <span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//遇到障碍物后面都是0,数组的初始值都是0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; m &amp;&amp; obstacleGrid[i][<span class=\"number\">0</span>] != <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; n &amp;&amp; obstacleGrid[<span class=\"number\">0</span>][j] != <span class=\"number\">1</span>; j++)&#123;</span><br><span class=\"line\">           dp[<span class=\"number\">0</span>][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//dp数组会普及到每一个位置，只要当前是障碍物就直接不通，默认初始值为0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">                dp[i][j] = (obstacleGrid[i][j] == <span class=\"number\">0</span>)? dp[i-<span class=\"number\">1</span>][j] + dp[i][j-<span class=\"number\">1</span>] : <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["动态规划"],"tags":["Java","dp","LeetCode"]},{"title":"LeetCode-分割等和子集","url":"/2024/12/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/LeetCode-%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/","content":"<h1 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h1>\n<p>给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p>\n<blockquote>\n<p>注：注意: 每个数组中的元素不会超过 100 数组的大小不会超过 200</p>\n</blockquote>\n<p>示例1</p>\n<ul>\n<li>输入: [1, 5, 11, 5]</li>\n<li>输出: true</li>\n<li>解释: 数组可以分割成 [1, 5, 5] 和 [11].</li>\n</ul>\n<p>示例2</p>\n<ul>\n<li>输入: [1, 2, 3, 5]</li>\n<li>输出: false</li>\n<li>解释: 数组不能分割成两个元素和相等的子集.</li>\n</ul>\n<h1 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h1>\n<p>初步看这个题是要把给定数组分成两个子集，使其总和相等，那么我们只需要在集合中找出<code>sum/2</code>的子集总和，就可以分割成相同元素和子集了。</p>\n<p>！那么这道题就很适合用01背包来做了，这道题中我们的元素只能取一次，首先我们可以把背包大小定为我们所需要寻找的<code>sum/2</code>的子集和，其给定数组的元素的重量和价值都是数组元素值，我们只需写出递推公式，然后再去查看是否有子集能填满容量<code>sum/2</code>。</p>\n<p><strong>总结一下便是以下四点：</strong></p>\n<blockquote>\n<p>背包的体积为<code>sum/2</code><br />\n背包要放入的商品（集合里的元素）重量为 元素的数值，价值也为元素的数值<br />\n背包如果正好装满，说明找到了总和为 <code>sum/2</code>的子集。<br />\n背包中每一个元素是不可重复放入。</p>\n</blockquote>\n<h2 id=\"动态规划五步曲\"><a class=\"markdownIt-Anchor\" href=\"#动态规划五步曲\"></a> 动态规划五步曲</h2>\n<ol>\n<li>确定dp数组以及下标的含义</li>\n</ol>\n<p>01背包中，dp[j]表示： 容量为j的背包，所背的物品价值最大可以为dp[j]。本题中每一个元素的数值既是重量，也是价值。</p>\n<p><strong>套到本题，dp[j]表示 背包总容量（所能装的总重量）是j，放进物品后，背的最大重量为dp[j]。</strong></p>\n<ol start=\"2\">\n<li>确定递推公式</li>\n</ol>\n<p>01背包的递推公式为：dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);</p>\n<p>本题，相当于背包里放入数值，那么物品i的重量是nums[i]，其价值也是nums[i]。</p>\n<p>所以递推公式：dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);</p>\n<ol start=\"3\">\n<li>dp数组如何初始化</li>\n</ol>\n<p>从dp[j]的定义来看，首先dp[0]一定是0。</p>\n<p>如果题目给的价值都是正整数那么非0下标都初始化为0就可以了，如果题目给的价值有负数，那么非0下标就要初始化为负无穷。本题题目中 只包含正整数的非空数组，所以非0下标的元素初始化为0就可以了。</p>\n<p><strong>这样才能让dp数组在递推的过程中取得最大的价值，而不是被初始值覆盖了。</strong></p>\n<ol start=\"4\">\n<li>确定遍历顺序<br />\n如果使用一维dp数组，物品遍历的for循环放在外层，遍历背包的for循环放在内层，且内层for循环倒序遍历！</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> target; j &gt;= nums[i]; j++)&#123;</span><br><span class=\"line\">        dp[j] = Math.max(dp[j], dp[j - nums[i]] + nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>举例推导dp数组</li>\n</ol>\n<p><strong>如果dp[j] == j 说明，集合中的子集总和正好可以凑成总和j，理解这一点很重要。</strong></p>\n<p>注：dp[j]的数值一定是小于等于j的。</p>\n<p>用例1，输入[1,5,11,5] 为例，如图：<br />\n<img src=\"/img/timu/416-1.png\" alt=\"01背包\" title=\"01背包\" /><br />\n最后dp[11] == 11，说明可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1rt4y1N7jE/\">《代码随想录》算法公开课</a><br />\n<a href=\"https://leetcode.cn/problems/partition-equal-subset-sum/description/\">力扣题目链接</a></p>\n</blockquote>\n<h2 id=\"代码实现-一维dp数组\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-一维dp数组\"></a> 代码实现-一维dp数组</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canPartition</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums == <span class=\"literal\">null</span> || nums.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//求数组总和</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">            sum += num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//总和为奇数，不能平分</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum % <span class=\"number\">2</span> != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> sum / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">//本题所给数组是非零整数，则将所有值初始为0</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[target + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//先遍历物品，再去遍历背包大小</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> target; j &gt;= nums[i]; j--) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//物品 i 的重量是 nums[i]，其价值也是 nums[i]</span></span><br><span class=\"line\">                dp[j] = Math.max(dp[j], dp[j - nums[i]] + nums[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"comment\">//剪枝一下，每一次完成内层的for-loop，立即检查是否dp[target] == target，优化时间复杂度（26ms -&gt; 20ms）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dp[target] == target)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[target] == target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码实现-二维dp数组\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-二维dp数组\"></a> 代码实现-二维dp数组</h2>\n<p>看不懂的话详见<a href=\"https://youzi-ch.github.io/2024/12/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-01%E8%83%8C%E5%8C%85%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/\">动态规划-01背包理论基础(一)</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canPartition</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">//记录数组总和</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums)</span><br><span class=\"line\">            sum += num;</span><br><span class=\"line\">        <span class=\"comment\">//总和为奇数直接不满足题意返回false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum % <span class=\"number\">2</span> == <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> sum / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//定义数组大小</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[nums.length][target + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//对dp数组进行初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> nums[<span class=\"number\">0</span>]; j &lt;= target; j++)&#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt;= target; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j &lt; nums[i]) </span><br><span class=\"line\">                    dp[i][j] = dp[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">                <span class=\"keyword\">else</span> </span><br><span class=\"line\">                    dp[i][j] = Math.max(dp[i - <span class=\"number\">1</span>][j], dp[i - <span class=\"number\">1</span>][j - nums[i]] + nums[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[len - <span class=\"number\">1</span>][target] == target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["01背包"],"tags":["Java","dp"]},{"title":"LeetCode-最后一块石头的重量II","url":"/2024/12/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/LeetCode-%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8FII/","content":"<h1 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h1>\n<p>有一堆石头，每块石头的重量都是正整数。每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x &lt;= y。那么粉碎的可能结果如下：</p>\n<p>如果 x == y，那么两块石头都会被完全粉碎；</p>\n<p>如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。</p>\n<p>最后，最多只会剩下一块石头。返回此石头最小的可能重量。如果没有石头剩下，就返回 0。</p>\n<p>示例1</p>\n<ul>\n<li>输入：[2,7,4,1,8,1]</li>\n<li>输出：1</li>\n<li>解释：\n<ul>\n<li>组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]，</li>\n<li>组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]，</li>\n<li>组合 2 和 1，得到 1，所以数组转化为 [1,1,1]，</li>\n<li>组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://www.bilibili.com/video/BV14M411C7oV/?vd_source=fd148478f48deef97bac8ef404e7216f\">《代码随想录》算法公开课</a><br />\n<a href=\"https://leetcode.cn/problems/last-stone-weight-ii/description/\">力扣题目链接</a></p>\n<h1 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h1>\n<p>本题其实就是尽量让石头分成重量相同的两堆，相撞之后剩下的石头最小，这样就化解成01背包问题了，本题物品的<code>重量为stones[i]</code>，物品的<code>价值也为stones[i]</code>，对应着01背包里的物品<code>重量weight[i]</code>和 <code>物品价值value[i]</code>，与上一题分割等和子集非常相似。</p>\n<h2 id=\"动态规划五步曲\"><a class=\"markdownIt-Anchor\" href=\"#动态规划五步曲\"></a> 动态规划五步曲</h2>\n<ol>\n<li>确定dp数组以及下标的含义</li>\n</ol>\n<p>dp[j]表示容量（这里说容量更形象，其实就是重量）为j的背包，最多可以背最大重量为dp[j]。</p>\n<p>可以回忆一下01背包中，dp[j]的含义，容量为j的背包，最多可以装的价值为 dp[j]。</p>\n<p>相对于 01背包，本题中，石头的重量是 stones[i]，石头的价值也是 stones[i] ，可以 “最多可以装的价值为 dp[j]” == “最多可以背的重量为dp[j]”</p>\n<ol start=\"2\">\n<li>确定递推公式</li>\n</ol>\n<p>01背包的递推公式为：dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);</p>\n<p><strong>本题则是：dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);</strong></p>\n<ol start=\"3\">\n<li>dp数组如何初始化</li>\n</ol>\n<p>既然 dp[j]中的j表示容量，那么最大容量（重量）是多少呢，就是所有石头的重量和。</p>\n<p>可以把石头遍历一遍，计算出石头总重量 然后除2，得到dp数组的大小。</p>\n<p>接下来就是如何初始化dp[j]呢，因为重量都不会是负数，所以dp[j]都初始化为0就可以了，这样在递归公式<code>dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);</code>中dp[j]才不会初始值所覆盖。</p>\n<ol start=\"4\">\n<li>确定遍历顺序</li>\n</ol>\n<p>如果使用一维dp数组，物品遍历的for循环放在外层，遍历背包的for循环放在内层，且内层for循环倒序遍历！</p>\n<ol start=\"5\">\n<li>举例推导dp数组</li>\n</ol>\n<p>举例，输入：[2,4,1,1]，此时target = (2 + 4 + 1 + 1)/2 = 4 ，dp数组状态图如下<br />\n<img src=\"/img/timu/1049-1.jpg\" alt=\"1049-1\" title=\"1049-1\" /></p>\n<p>最后dp[target]里是容量为target的背包所能背的最大重量。</p>\n<p>那么分成两堆石头，一堆石头的总重量是dp[target]，另一堆就是sum - dp[target]。</p>\n<p><strong>在计算target的时候，target = sum / 2 因为是向下取整，所以sum - dp[target] 一定是大于等于dp[target]的。</strong></p>\n<p>那么相撞之后剩下的最小石头重量就是 (sum - dp[target]) - dp[target]。</p>\n<h2 id=\"代码实现-一维数组\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-一维数组\"></a> 代码实现-一维数组</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">lastStoneWeightII</span><span class=\"params\">(<span class=\"type\">int</span>[] stones)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//求数组和</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : stones) &#123;</span><br><span class=\"line\">            sum += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//向下取整取得背包的最大容量</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> sum &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//初始化dp数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[target + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; stones.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//采用倒序</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> target; j &gt;= stones[i]; j--) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//两种情况，要么放，要么不放</span></span><br><span class=\"line\">                dp[j] = Math.max(dp[j], dp[j - stones[i]] + stones[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum - <span class=\"number\">2</span> * dp[target];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码实现-二维数组\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-二维数组\"></a> 代码实现-二维数组</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">lastStoneWeightII</span><span class=\"params\">(<span class=\"type\">int</span>[] stones)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//对数组求和</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> s : stones) &#123;</span><br><span class=\"line\">            sum += s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//向下取整获得背包的最大容量</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> sum / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//初始化，dp[i][j]为可以放0-i物品，背包容量为j的情况下背包中的最大价值</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[stones.length][target + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//dp[i][0]默认初始化为0</span></span><br><span class=\"line\">        <span class=\"comment\">//dp[0][j]取决于stones[0]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> stones[<span class=\"number\">0</span>]; j &lt;= target; j++) &#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = stones[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; stones.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt;= target; j++) &#123;<span class=\"comment\">//注意是等于</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j &gt;= stones[i]) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//不放:dp[i - 1][j] 放:dp[i - 1][j - stones[i]] + stones[i]</span></span><br><span class=\"line\">                    dp[i][j] = Math.max(dp[i - <span class=\"number\">1</span>][j], dp[i - <span class=\"number\">1</span>][j - stones[i]] + stones[i]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> (sum - dp[stones.length - <span class=\"number\">1</span>][target]) - dp[stones.length - <span class=\"number\">1</span>][target];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["01背包"],"tags":["Java","dp"]},{"title":"LeetCode-爬楼梯","url":"/2024/11/30/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/LeetCode-%E7%88%AC%E6%A5%BC%E6%A2%AF/","content":"<h1 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h1>\n<p>假设你正在爬楼梯。需要<code>n</code>阶你才能到达楼顶。每次你可以爬<code>1</code>或<code>2</code>个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n<blockquote>\n<p>注意：给定n是一个正整数</p>\n</blockquote>\n<p>示例1</p>\n<ul>\n<li>输入： 2</li>\n<li>输出： 2</li>\n<li>解释： 有两种方法可以爬到楼顶。\n<ul>\n<li>1 阶 + 1 阶</li>\n<li>2 阶</li>\n</ul>\n</li>\n</ul>\n<p>示例2</p>\n<ul>\n<li>输入： 3</li>\n<li>输出： 3</li>\n<li>解释： 有三种方法可以爬到楼顶。\n<ul>\n<li>1 阶 + 1 阶 + 1 阶</li>\n<li>1 阶 + 2 阶</li>\n<li>2 阶 + 1 阶</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV17h411h7UH/\">《代码随想录》算法公开课</a><br />\n<a href=\"https://leetcode.cn/problems/climbing-stairs/description/\">力扣题目链接</a></p>\n</blockquote>\n<h1 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h1>\n<p>首先，我们举几个栗子：<br />\n爬到第一层阶梯只有 一种方法<br />\n爬到第二层阶梯有两种方法<br />\n爬到第三层阶梯可以由第一层阶梯跨两步，或者由第二层阶梯跨一步<br />\n爬到第四层阶梯可以由第二层阶梯跨两步，或者由第三层阶梯跨一步</p>\n<p>由此我们得到规律：<code>dp[i]=dp[i-1]+dp[i-2]</code>，其中<code>i</code>为阶梯数，<code>dp[i]</code>为爬<code>i</code>层阶梯上顶层得方法数</p>\n<h1 id=\"动态规划五部曲\"><a class=\"markdownIt-Anchor\" href=\"#动态规划五部曲\"></a> 动态规划五部曲</h1>\n<ol>\n<li>确定dp数组以及下标的含义<br />\ndp[i]： 爬到第i层楼梯，有dp[i]种方法</li>\n<li>确定递推公式<br />\n<strong>dp[i] = dp[i - 1] + dp[i - 2]</strong></li>\n<li>dp数组初始化<br />\n需要注意的是：题目中说了n是一个正整数，题目根本就没说n有为0的情况，即只有dp[1]=1,dp[2]=2。</li>\n<li>确定遍历顺序<br />\n从递推公式dp[i] = dp[i - 1] + dp[i - 2];中可以看出，遍历顺序一定是从前向后遍历的</li>\n<li>举例推导dp数组</li>\n</ol>\n<h1 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">climbStairs</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        dp[i] = dp[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接下来难度升级挑战另一个爬楼梯小问题吧\"><a class=\"markdownIt-Anchor\" href=\"#接下来难度升级挑战另一个爬楼梯小问题吧\"></a> <strong>接下来，难度升级，挑战另一个爬楼梯小问题吧！</strong></h2>\n<h1 id=\"题目-2\"><a class=\"markdownIt-Anchor\" href=\"#题目-2\"></a> 题目</h1>\n<p>给你一个整数数组<code>cost</code>，其中<code>cost[i]</code>是从楼梯第<code>i</code>个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。你可以选择从下标为<code>0</code>或下标为<code>1</code>的台阶开始爬楼梯。请你计算并返回达到楼梯顶部的最低花费。</p>\n<p>示例1</p>\n<ul>\n<li>输入：cost = [10, <strong>15</strong> ,20]</li>\n<li>输出：15</li>\n<li>解释：你将从下标为 1 的台阶开始。\n<ul>\n<li>支付 15 ，向上爬两个台阶，到达楼梯顶部。<br />\n总花费为 15 。</li>\n</ul>\n</li>\n</ul>\n<p>示例2</p>\n<ul>\n<li>输入：cost = [<strong>1</strong> ,100,<strong>1</strong> ,1,<strong>1</strong> ,100,<strong>1</strong> ,<strong>1</strong> ,100,<strong>1</strong>]</li>\n<li>输出：6</li>\n<li>解释：你将从下标为 0 的台阶开始。\n<ul>\n<li>支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。</li>\n<li>支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。</li>\n<li>支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。</li>\n<li>支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。</li>\n<li>支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。</li>\n<li>支付 1 ，向上爬一个台阶，到达楼梯顶部。<br />\n总花费为 6 。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV16G411c7yZ/?vd_source=fd148478f48deef97bac8ef404e7216f\">“《代码随想录》算法公开课”</a><br />\n<a href=\"https://leetcode.cn/problems/min-cost-climbing-stairs/description/\">“力扣题目链接”</a></p>\n</blockquote>\n<h1 id=\"思路-2\"><a class=\"markdownIt-Anchor\" href=\"#思路-2\"></a> 思路</h1>\n<p>首先我们要知道题目中说的从<code>0</code>或者<code>1</code>开始爬楼梯，便是告诉我们到达<code>0</code>或者<code>1</code>台阶是不需要花费体力，从<code>0</code>或者<code>1</code>向上跳就需要花费体力。</p>\n<h2 id=\"动态规划五步曲\"><a class=\"markdownIt-Anchor\" href=\"#动态规划五步曲\"></a> 动态规划五步曲</h2>\n<ol>\n<li>\n<p>确定dp数组以及下标的含义<br />\n<strong>dp[i]的定义：到达第i台阶所花费的最少体力为dp[i]。</strong></p>\n</li>\n<li>\n<p>确定递推公式<br />\n<strong>可以有两个途径得到dp[i]，一个是dp[i-1] 一个是dp[i-2]</strong><br />\ndp[i - 1] 跳到 dp[i] 需要花费 dp[i - 1] + cost[i - 1]。<br />\ndp[i - 2] 跳到 dp[i] 需要花费 dp[i - 2] + cost[i - 2]。<br />\n即<strong>dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);</strong></p>\n</li>\n</ol>\n<blockquote>\n<p>注：给定数组从0索引开始，这里的i代表跨越了i个阶梯，即实际走了i+1个阶梯</p>\n</blockquote>\n<ol start=\"3\">\n<li>\n<p>dp数组如何初始化<br />\n由题目可知dp[0] = 0,dp[1] = 0，dp[2]可以由dp[0]和dp[1]推出，以此类推</p>\n</li>\n<li>\n<p>确定遍历顺序<br />\n由递推公式，我们可以很轻易知晓，该题一定是由前向后遍历</p>\n</li>\n<li>\n<p>举例推导dp数组<br />\n拿示例2：cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1] ，来模拟一下dp数组的状态变化，如下：<br />\n<img src=\"/img/timu/746-1.png\" alt=\"746\" title=\"LeetCode746\" /></p>\n</li>\n</ol>\n<h1 id=\"代码实现-2\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-2\"></a> 代码实现</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minCostClimbingStairs</span><span class=\"params\">(<span class=\"type\">int</span>[] cost)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> cost.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[len + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从下标为 0 或下标为 1 的台阶开始，因此支付费用为0</span></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算到达每一层台阶的最小费用</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i &lt;= len; i++) &#123;</span><br><span class=\"line\">            dp[i] = Math.min(dp[i - <span class=\"number\">1</span>] + cost[i - <span class=\"number\">1</span>], dp[i - <span class=\"number\">2</span>] + cost[i - <span class=\"number\">2</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[len];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["动态规划"],"tags":["Java","dp"]},{"title":"LeetCode-目标和","url":"/2024/12/25/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/LeetCode-%E7%9B%AE%E6%A0%87%E5%92%8C/","content":"<h1 id=\"题目-目标和\"><a class=\"markdownIt-Anchor\" href=\"#题目-目标和\"></a> 题目-目标和</h1>\n<p>给定一个非负整数数组，a1, a2, …, an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。</p>\n<p>返回可以使最终数组和为目标数 S 的所有添加符号的方法数。</p>\n<p>示例1</p>\n<ul>\n<li>输入：nums: [1, 1, 1, 1, 1], S: 3</li>\n<li>输出：5</li>\n</ul>\n<p>解释：一共有5种方法让最终目标和为3</p>\n<ul>\n<li>-1+1+1+1+1 = 3</li>\n<li>+1-1+1+1+1 = 3</li>\n<li>+1+1-1+1+1 = 3</li>\n<li>+1+1+1-1+1 = 3</li>\n<li>+1+1+1+1-1 = 3</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1o8411j73x/\">《代码随想录》算法公开课</a><br />\n<a href=\"https://leetcode.cn/problems/target-sum/description/\">力扣题目链接</a></p>\n</blockquote>\n<h1 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h1>\n<p>本题要如何使表达式结果为<code>target</code>，</p>\n<p>既然为target，那么就一定有 <code>left组合 - right组合 = target</code>。</p>\n<p><code>left + right = sum</code>，而sum是固定的。<code>right = sum - left</code></p>\n<p><code>left - (sum - left) = target</code> 推导出 <code>left = (target + sum)/2 </code></p>\n<p>target是固定的，sum是固定的，left就可以求出来。</p>\n<p>此时问题就是在集合nums中找出和为left的组合。</p>\n<h2 id=\"动态规划五步曲\"><a class=\"markdownIt-Anchor\" href=\"#动态规划五步曲\"></a> 动态规划五步曲</h2>\n<p>假设加法的总和为<code>x</code>，那么减法对应的总和就是<code>sum - x</code>。所以我们要求的是 <code>x - (sum - x) = target</code>，而<code>x = (target + sum) / 2</code></p>\n<p><strong>此时问题就转化为，用nums装满容量为x的背包，有几种方法</strong></p>\n<p>注意：这里的<code>x</code>，就是<code>bagSize</code>，也就是我们后面要求的背包容量</p>\n<ol>\n<li>确定dp数组以及下标的含义</li>\n</ol>\n<p>先用二维dp数组求解本题，dp[i][j]：使用下标为[0, i]的nums[i]能够凑满j（包括j）这么大容量的包，有dp[i][j]种方法。</p>\n<ol start=\"2\">\n<li>确定递推公式</li>\n</ol>\n<p>我们先手动推导一下，这个二维数组里面的数值</p>\n<ul>\n<li>先只考虑物品<code>0</code>，如下图：</li>\n</ul>\n<p>装满背包容量为<code>0</code>的方法个数是<code>1</code>，即 放<code>0</code>件物品。<br />\n装满背包容量为<code>1</code>的方法个数是<code>1</code>，即 放物品<code>0</code>。<br />\n装满背包容量为<code>2</code> 的方法个数是<code>0</code>，目前没有办法能装满容量为<code>2</code>的背包。</p>\n<ul>\n<li>接下来 考虑 物品<code>0</code> 和 物品<code>1</code>，如下图：</li>\n</ul>\n<p>装满背包容量为<code>0</code>的方法个数是<code>1</code>，即 放<code>0</code>件物品。<br />\n装满背包容量为<code>1</code>的方法个数是<code>2</code>，即 放物品<code>0</code>或者放物品<code>1</code>。<br />\n装满背包容量为<code>2</code>的方法个数是<code>1</code>，即 放物品<code>0</code>和放物品<code>1</code>。<br />\n其他容量都不能装满，所以方法是<code>0</code>。</p>\n<ul>\n<li>接下来 考虑 物品<code>0</code>、物品<code>1</code>和物品<code>2</code>，如下图：</li>\n</ul>\n<p>装满背包容量为<code>0</code>的方法个数是<code>1</code>，即放<code>0</code>件物品。<br />\n装满背包容量为<code>1</code>的方法个数是<code>3</code>，即放物品<code>0</code>或者放物品<code>1</code> 或者 放物品<code>2</code>。<br />\n装满背包容量为<code>2</code>的方法个数是<code>3</code>，即放物品<code>0</code>和放物品<code>1</code>、放物品<code>0</code>和物品<code>2</code>、放物品<code>1</code>和物品<code>2</code>。<br />\n装满背包容量为<code>3</code>的方法个数是<code>1</code>，即 放物品<code>0</code>和物品<code>1</code>和物品<code>2</code>。<br />\n<img src=\"/img/timu/494-1.png\" alt=\"494-1\" title=\"494-1\" /></p>\n<p>现在我们来看看dp[2][2]由什么方向推出来！</p>\n<p>dp[2][2] = 3，即 放物品0 和 放物品1、放物品0 和 物品 2、放物品1 和 物品2</p>\n<ul>\n<li><strong>容量为2 的背包，如果不放 物品2 有几种方法呢？</strong></li>\n</ul>\n<p>有<code>dp[1][2]</code>种方法，即 背包容量为2，只考虑物品0 和 物品1 ，有 dp[1][2] 种方法</p>\n<ul>\n<li><strong>容量为2 的背包， 如果放 物品2 有几种方法呢？</strong></li>\n</ul>\n<p>首先 要在背包里 先把物品2的容量空出来， 装满刨除物品2容量 的背包 有几种方法呢？刨除物品2容量后的背包容量为 1</p>\n<p>此时装满背包容量为1 有<code>dp[1][1]</code>种方法，即： 不放物品2，背包容量为1，只考虑物品 0 和 物品 1，有 dp[1][1] 种方法</p>\n<p>即：dp[2][2] = 容量为2的背包不放物品2有几种方法 + 容量为2的背包放物品2有几种方法</p>\n<ul>\n<li><strong>所以 dp[2][2] = dp[1][2] + dp[1][1]</strong></li>\n</ul>\n<p>上述过程可抽象为如下：</p>\n<ul>\n<li>\n<p>不放物品i：即背包容量为j，里面不放物品i，装满有<code>dp[i - 1][j]</code>中方法。</p>\n</li>\n<li>\n<p>放物品i： 即：先空出物品i的容量，背包容量为（j - 物品i容量），放满背包有 <code>dp[i - 1][j - 物品i容量]</code> 种方法。</p>\n</li>\n</ul>\n<p><strong>本题中，物品i的容量是nums[i]，价值也是nums[i]</strong></p>\n<p>即：递推公式：<code>dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i]]</code></p>\n<p>观察递推公式可知，我们会存在放不下<code>i</code>物品的情况，当<code>j-nums[i]小于0</code>时，说明背包容量装不下物品<code>i</code>，所以此时装满背包的方法值 等于不放物品i的装满背包的方法，即：<code>dp[i][j] = dp[i - 1][j]</code></p>\n<ol start=\"3\">\n<li>dp数组如何初始化</li>\n</ol>\n<p>先明确递推的方向，求解 dp[2][2] 是由上方和左上方推出。那么二维数组的最上行 和 最左列一定要初始化，这是递推公式推导的基础。</p>\n<ul>\n<li>\n<p>最上行：<br />\ndp[0][j]：只放物品0， 把容量为j的背包填满有几种方法。只有背包容量为 物品0 的容量的时候，方法为1，正好装满。其他情况下，要不是装不满，要不是装不下。<br />\n<strong>所以初始化：dp[0][nums[0]] = 1 ，其他均为0 。</strong></p>\n</li>\n<li>\n<p>最左列：<br />\ndp[i][0] : 背包容量为0， 放物品0 到 物品i，装满有几种方法。都是有一种方法，就是放0件物品。<br />\n<strong>即 dp[i][0] = 1</strong></p>\n</li>\n</ul>\n<ol start=\"4\">\n<li>确定遍历顺序</li>\n</ol>\n<p>在明确递推方向时，我们知道 当前值 是由上方和左上方推出。那么我们的遍历顺序一定是 从上到下，从左到右。因为只有这样，我们才能基于之前的数值做推导。</p>\n<ol start=\"5\">\n<li>举例推导dp数组</li>\n</ol>\n<p>自己推，结果如图：<br />\n<img src=\"/img/timu/494-2.png\" alt=\"494-2\" title=\"494-2\" /></p>\n<h2 id=\"代码实现-二维数组\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-二维数组\"></a> 代码实现-二维数组</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findTargetSumWays</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//对数组进行求和</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i : nums)&#123;</span><br><span class=\"line\">            sum += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//当目标和大于数组和时，表示没有组合方法可以实现目标和，即返回0种方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Math.abs(target) &gt; sum || (target + sum) % <span class=\"number\">2</span> != <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根据上述分析，求出背包的最大容量，x的分析上述已给出</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> (target+sum) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//dp[i][j] 下标0-i的nums元素填满大小为j的背包的方法数</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[nums.length][x+<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//对dp数组进行初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[<span class=\"number\">0</span>] &lt;= x)dp[<span class=\"number\">0</span>][nums[<span class=\"number\">0</span>]] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numZeros</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                numZeros++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = (<span class=\"type\">int</span>) Math.pow(<span class=\"number\">2</span>, numZeros);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt;= x; j++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//当前物品i无法放入j大小的背包</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j &lt; nums[i]) dp[i][j] = dp[i-<span class=\"number\">1</span>][j];</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//当前物品i能放进j大小的背包</span></span><br><span class=\"line\">                    <span class=\"comment\">//不放nums[i]和放nums[i]</span></span><br><span class=\"line\">                    dp[i][j] = dp[i-<span class=\"number\">1</span>][j] + dp[i-<span class=\"number\">1</span>][j-nums[i]];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[nums.length-<span class=\"number\">1</span>][x];</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码实现-一维数组\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-一维数组\"></a> 代码实现-一维数组</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findTargetSumWays</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) sum += nums[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果target的绝对值大于sum，那么是没有方案的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Math.abs(target) &gt; sum) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//如果(target+sum)除以2的余数不为0，也是没有方案的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((target + sum) % <span class=\"number\">2</span> == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">bagSize</span> <span class=\"operator\">=</span> (target + sum) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[bagSize + <span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> bagSize; j &gt;= nums[i]; j--) &#123;</span><br><span class=\"line\">                dp[j] += dp[j - nums[i]];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[bagSize];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["动态规划"],"tags":["Java","dp","LeetCode"]},{"title":"买卖股票的最佳时机II","url":"/2024/11/29/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII/","content":"<h1 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h1>\n<p>给定一个数组，它的第<code>i</code>个元素是一支给定股票第<code>i</code>天的价格。设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>\n<blockquote>\n<p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\n</blockquote>\n<p>示例1</p>\n<ul>\n<li>输入: [7,1,5,3,6,4]</li>\n<li>输出: 7</li>\n<li>解释: 在第2天（股票价格 = 1）的时候买入，在第3天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4。随后，在第4天（股票价格 = 3）的时候买入，在第5天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</li>\n</ul>\n<p>示例2</p>\n<ul>\n<li>输入: [1,2,3,4,5]</li>\n<li>输出: 4</li>\n<li>解释: 在第1天（股票价格 = 1）的时候买入，在第5天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。注意你不能在第1天和第2天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</li>\n</ul>\n<p>示例3</p>\n<ul>\n<li>输入: [7,6,4,3,1]</li>\n<li>输出: 0</li>\n<li>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1ev4y1C7na/\">《代码随想录》算法公开课</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/\">力扣题目链接</a></p>\n</blockquote>\n<h1 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h1>\n<ul>\n<li>首先，我们手上只能有一支股票，根据题目可知，要想产生利润，必须得是前一天股票的价值小于第二天的，这样我们的差值才会大于<code>0</code>。</li>\n<li>把数组分成一个个递增的小片段，当有值大于前一个值时便进行利润计算，再把一个个小片段进行累加，得到最终结果。- 只要有利润，我们就要，这便是<code>局部最优</code>，把每个小利润加起来得到的最大值，便是<code>全局最优</code>。</li>\n</ul>\n<h1 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span>[] prices)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//作为返回值，统计结果</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//当前股票值高于前一天，即差值大于0，则加入利润中</span></span><br><span class=\"line\">            result += Math.max(prices[i] - prices[i - <span class=\"number\">1</span>], <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["贪心算法"],"tags":["Java","贪心算法"]},{"title":"LeetCode-零和一","url":"/2024/12/26/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/LeetCode-%E9%9B%B6%E5%92%8C%E4%B8%80/","content":"<h1 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h1>\n<p>给你一个二进制字符串数组 strs 和两个整数 m 和 n 。</p>\n<p>请你找出并返回 strs 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。</p>\n<p>如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。</p>\n<p>示例1：</p>\n<ul>\n<li>\n<p>输入：strs = [“10”, “0001”, “111001”, “1”, “0”], m = 5, n = 3</p>\n</li>\n<li>\n<p>输出：4</p>\n</li>\n<li>\n<p>解释：最多有 5 个 0 和 3 个 1 的最大子集是 {“10”,“0001”,“1”,“0”} ，因此答案是 4 。 其他满足题意但较小的子集包括 {“0001”,“1”} 和 {“10”,“1”,“0”} 。{“111001”} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。</p>\n</li>\n</ul>\n<p>示例2：</p>\n<ul>\n<li>输入：strs = [“10”, “0”, “1”], m = 1, n = 1</li>\n<li>输出：2</li>\n<li>解释：最大的子集是 {“0”, “1”} ，所以答案是 2 。</li>\n</ul>\n<p><a href=\"https://www.bilibili.com/video/BV1rW4y1x7ZQ/?vd_source=fd148478f48deef97bac8ef404e7216f\">《代码随想录》算法公开课</a><br />\n<a href=\"https://leetcode.cn/problems/ones-and-zeroes/description/\">力扣题目链接</a></p>\n<h1 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h1>\n<p><strong>本题中strs 数组里的元素就是物品，每个物品都是一个！而m 和 n相当于是一个背包，两个维度的背包。</strong></p>\n<h2 id=\"动态规划五步曲\"><a class=\"markdownIt-Anchor\" href=\"#动态规划五步曲\"></a> 动态规划五步曲</h2>\n<ol>\n<li>确定dp数组（dp table）以及下标的含义</li>\n</ol>\n<p><strong>dp[i][j]：最多有i个0和j个1的strs的最大子集的大小为dp[i][j]。</strong></p>\n<ol start=\"2\">\n<li>确定递推公式</li>\n</ol>\n<p>dp[i][j] 可以由前一个strs里的字符串推导出来，strs里的字符串有zeroNum个0，oneNum个1。</p>\n<p>dp[i][j] 就可以是 dp[i - zeroNum][j - oneNum] + 1。</p>\n<p>然后我们在遍历的过程中，取dp[i][j]的最大值。</p>\n<p>所以递推公式：<code>dp[i][j] = max(dp[i][j], dp[i - zeroNum][j - oneNum] + 1)</code></p>\n<p>此时可以回想一下01背包的递推公式：dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);</p>\n<p>对比一下就会发现，字符串的<code>zeroNum</code>和<code>oneNum</code>相当于<code>物品的重量（weight[i]）</code>，字符串本身的个数相当于<code>物品的价值（value[i]）</code>。</p>\n<p>这就是一个典型的01背包！ 只不过物品的重量有了两个维度而已。</p>\n<ol start=\"3\">\n<li>dp数组如何初始化</li>\n</ol>\n<p>01背包的dp数组初始化为0就可以。</p>\n<p>因为物品价值不会是负数，初始为0，保证递推的时候dp[i][j]不会被初始值覆盖。</p>\n<ol start=\"4\">\n<li>确定遍历顺序</li>\n</ol>\n<p>一定是外层for循环遍历物品，内层for循环遍历背包容量且从后向前遍历！物品就是strs里的字符串，背包容量就是题目描述中的m和n</p>\n<ol start=\"5\">\n<li>举例推导dp数组</li>\n</ol>\n<p>以输入：[“10”,“0001”,“111001”,“1”,“0”]，m = 3，n = 3为例</p>\n<p>最后dp数组的状态如下所示：<br />\n<img src=\"/img/timu/0474-1.jpg\" alt=\"0474-1\" title=\"0474-1\" /></p>\n<h2 id=\"代码实现-二维数组\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-二维数组\"></a> 代码实现-二维数组</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findMaxForm</span><span class=\"params\">(String[] strs, <span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m+<span class=\"number\">1</span>][n+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> oneNum, zeNum;</span><br><span class=\"line\">        <span class=\"comment\">//分别统计数组中每个字符的0个数和1个数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String s : strs)&#123;</span><br><span class=\"line\">            oneNum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            zeNum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">char</span> c : s.toCharArray())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;0&#x27;</span>) zeNum++;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> oneNum++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> m; i &gt;= zeNum; i--)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> n; j &gt;= oneNum; j--)&#123;</span><br><span class=\"line\">                        dp[i][j] = Math.max(dp[i][j], dp[i-zeNum][j-oneNum] + <span class=\"number\">1</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m][n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["01背包"],"tags":["Java","dp"]},{"title":"动态规划-01背包理论基础(一)","url":"/2024/12/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-01%E8%83%8C%E5%8C%85%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/","content":"<h1 id=\"动态规划01背包理论基础一\"><a class=\"markdownIt-Anchor\" href=\"#动态规划01背包理论基础一\"></a> 动态规划：01背包理论基础(一)</h1>\n<h2 id=\"背包分类图\"><a class=\"markdownIt-Anchor\" href=\"#背包分类图\"></a> 背包分类图</h2>\n<p><img src=\"/img/timu/01-1.png\" alt=\"01背包\" title=\"01背包\" /></p>\n<h2 id=\"什么是01背包\"><a class=\"markdownIt-Anchor\" href=\"#什么是01背包\"></a> 什么是01背包？</h2>\n<h3 id=\"01背包\"><a class=\"markdownIt-Anchor\" href=\"#01背包\"></a> 01背包</h3>\n<p>有<code>n</code>件物品和一个最多能背重量为<code>w</code>的背包。第i件物品的重量是<code>weight[i]</code>，得到的价值是<code>value[i]</code> 。每件物品只能用一次，求解将哪些物品装入背包里物品价值总和最大。</p>\n<h3 id=\"关于其他背包\"><a class=\"markdownIt-Anchor\" href=\"#关于其他背包\"></a> 关于其他背包</h3>\n<ul>\n<li>除01背包以外其他类型的背包，面试几乎不会问，都是竞赛级别的了，leetcode上连多重背包的题目都没有，所以题库也告诉我们，01背包和完全背包就够用了。</li>\n<li>而完全背包又是也是01背包稍作变化而来，即：完全背包的物品数量是无限的。</li>\n<li><strong>所以背包问题的理论基础重中之重是01背包，一定要理解透！</strong></li>\n</ul>\n<h2 id=\"举个栗子\"><a class=\"markdownIt-Anchor\" href=\"#举个栗子\"></a> 举个栗子</h2>\n<p>weight = [1, 3, 4]<br />\nvalue = [15, 20, 30]</p>\n<blockquote>\n<p>注：下面所出现的数字都以此例子为例</p>\n</blockquote>\n<h3 id=\"二维dp数组01背包\"><a class=\"markdownIt-Anchor\" href=\"#二维dp数组01背包\"></a> 二维dp数组01背包</h3>\n<p><strong>动态规划五步曲：</strong></p>\n<ol>\n<li>确定dp数组以及下标的含义</li>\n</ol>\n<p>我们有两个维度需要分别表示：物品和背包容量，即有0-i个放入j容量的背包所拿到的最大价值，其中0-i个物品皆可选择是否放入，且物品唯一，如下图：<br />\n<img src=\"/img/timu/01-2.png\" alt=\"01背包\" title=\"01背包\" /><br />\n（如果想用j 表示物品，j表示背包容量 行不行？ 都可以的，个人习惯而已）<br />\n然后我们来逐一分析一下：</p>\n<p><strong>首先是把物品0放入背包的情况，weight[0] = 1, value[0] = 15:</strong><br />\n<img src=\"/img/timu/01-3.png\" alt=\"01背包\" title=\"01背包\" /><br />\n背包容量为0，放不下物品0，此时背包里的价值为0。</p>\n<p>背包容量为1，可以放下物品0，此时背包里的价值为15.</p>\n<p>背包容量为2，依然可以放下物品0 （注意 01背包里物品只有一个），此时背包里的价值为15。<br />\n以此类推。</p>\n<p><strong>然后是0物品和1物品同时有的情况：</strong><br />\n<img src=\"/img/timu/01-4.png\" alt=\"01背包\" title=\"01背包\" /><br />\n背包容量为 0，放不下物品0 或者物品1，此时背包里的价值为0。<br />\n背包容量为 1，只能放下物品0，背包里的价值为15。</p>\n<p>背包容量为 2，只能放下物品0，背包里的价值为15。</p>\n<p>背包容量为 3，上一行同一状态，背包只能放物品0，这次也可以选择物品1了，背包可以放物品1 或者 物品0，物品1价值更大，背包里的价值为20。</p>\n<p>背包容量为 4，上一行同一状态，背包只能放物品0，这次也可以选择物品1了，背包可以放下物品0 和 物品1，背包价值为35。</p>\n<p>通过这个举例，我们来进一步明确dp数组的含义。<br />\n即<code>dp[i][j] 表示从下标为[0-i]的物品里任意取，放进容量为j的背包，价值总和最大是多少。</code></p>\n<ol start=\"2\">\n<li>确定递推公式</li>\n</ol>\n<p>对于递推公式，首先我们要明确有哪些方向可以推导出<code>dp[i][j]</code>。<br />\n这里我们以<code>dp[1][4]</code>为例：<br />\n首先我们有物品0和物品1，<code>dp[1][4]</code>有两种情况：放物品1？还是不放物品1？</p>\n<p>如果<code>不放</code>物品1，则背包价值应该为<code>dp[0][4]</code>，如果<code>放</code>物品1，则我们应该预先留出放物品1的空间，则此时的<code>j</code>为<code>4-weight[1]</code>，且我们是没有放物品1的，则此时的<code>i</code><br />\n为<code>i-1</code>，则我们推出了两种<code>dp[1][4]</code>的来源，此时我们只需要取其最大价值即可。即递推方程为：<br />\n<code>dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i])</code></p>\n<ol start=\"3\">\n<li>dp数组初始化<br />\n首先从<code>dp[i][j]</code>的定义出发，如果背包容量j为0的话，即<code>dp[i][0]</code>，无论是选取哪些物品，背包价值总和一定为0。如图：<br />\n<img src=\"/img/timu/01-5.png\" alt=\"01背包\" title=\"01背包\" /></li>\n</ol>\n<p>状态转移方程 <code>dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i])</code>; 可以看出<code>i</code>是由 <code>i-1</code>推导出来，那么i为0的时候就一定要初始化。</p>\n<p><code>dp[0][j]</code>，即：i为0，存放编号0的物品的时候，各个容量的背包所能存放的最大价值。</p>\n<p>那么很明显当<code>j &lt; weight[0]</code>的时候<code>dp[0][j]</code>应该是 0，因为背包容量比编号0的物品重量还小。</p>\n<p>当<code>j &gt;= weight[0]</code>时<code>dp[0][j]</code>应该是<code>value[0]</code>，因为背包容量放足够放编号0物品。</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在创建数组时就已经初始为0了 ，可以省略</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; weight[<span class=\"number\">0</span>]; j++)&#123;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> weight[<span class=\"number\">0</span>]; j &lt;= bagWeight; j++)&#123;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][j] = value[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下图：<br />\n<img src=\"/img/timu/01-06.png\" alt=\"01背包\" title=\"01背包\" /></p>\n<ol start=\"4\">\n<li>确定遍历顺序</li>\n</ol>\n<p>由递推公式可知dp[i][j]由它二维数组的左上方推演而来，则其先遍历背包容量或者先遍历物品都是可以的，看自己习惯。</p>\n<ol start=\"5\">\n<li>举例推导dp数组</li>\n</ol>\n<p>自己在纸上推演，再来写代码,结果如图：<br />\n<img src=\"/img/timu/01-7.jpg\" alt=\"01背包\" title=\"01背包\" /></p>\n<blockquote>\n<p><a href=\"https://kamacoder.com/problempage.php?pid=1046\">01背包原题</a><br />\n<a href=\"https://www.bilibili.com/video/BV1cg411g7Y6/?vd_source=fd148478f48deef97bac8ef404e7216f\">《代码随想录》算法公开课</a></p>\n</blockquote>\n<h3 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> scanner.nextInt();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">bagWeight</span> <span class=\"operator\">=</span> scanner.nextInt();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//定义两个数组用于接收给定数据</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] weight = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">        <span class=\"type\">int</span>[] value = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//接收键盘端传入的两个数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            weight[i] = scanner.nextInt();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            value[j] = scanner.nextInt();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根据上述分析去定义dp数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n][bagWeight + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//对dp数组进行初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> weight[<span class=\"number\">0</span>]; j &lt;= bagWeight; j++) &#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = value[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//递推遍历数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt;= bagWeight; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果当前的物品重量大于背包容量，则dp取值为不放入i物品的最大价值，即dp[i][j] = dp[i - 1][j]</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j &lt; weight[i]) &#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    dp[i][j] = Math.max(dp[i - <span class=\"number\">1</span>][j], dp[i - <span class=\"number\">1</span>][j - weight[i]] + value[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//输出结果[n-1]为从数组中任取的0-i元素，[bagWeight]为背包的最大容量，结果为最大价值</span></span><br><span class=\"line\">        System.out.println(dp[n - <span class=\"number\">1</span>][bagWeight]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["01背包"],"tags":["Java","dp","二维数组"]},{"title":"动态规划入门","url":"/2024/11/30/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/","content":"<h1 id=\"动态规划简介\"><a class=\"markdownIt-Anchor\" href=\"#动态规划简介\"></a> 动态规划简介</h1>\n<p>动态规划，英文：Dynamic Programming，简称DP，如果某一问题有很多重叠子问题，使用动态规划是最有效的。</p>\n<p>所以动态规划中每一个状态一定是由上一个状态推导出来的，这一点就区分于贪心，贪心没有状态推导，而是从局部直接选最优的。</p>\n<h2 id=\"动态规划五步曲\"><a class=\"markdownIt-Anchor\" href=\"#动态规划五步曲\"></a> 动态规划五步曲</h2>\n<blockquote>\n<ol>\n<li>确定dp数组（dp table）以及下标的含义</li>\n<li>确定递推公式</li>\n<li>dp数组如何初始化</li>\n<li>确定遍历顺序</li>\n<li>举例推导dp数组</li>\n</ol>\n</blockquote>\n<p><strong>注：一些情况是递推公式决定了dp数组要如何初始化！</strong></p>\n<h2 id=\"动态规划应该如何debug\"><a class=\"markdownIt-Anchor\" href=\"#动态规划应该如何debug\"></a> 动态规划应该如何debug</h2>\n<p>当我们去学动态规划的题很容易出现看完题解，自己上手写代码一直通过不了，首先我们要明白，<strong>写动态规划，代码出问题很正常！</strong></p>\n<p>debug：</p>\n<blockquote>\n<p>把dp数组打印出来，看看究竟是不是自己的思路所推演的结果</p>\n</blockquote>\n<p>写动态规划最忌讳的就是不清楚dp数组的含义，不懂为什么这样初始化，只会一味的去背代码，要明白，不是所有的题都能凭借所谓的题感直接写出来的，我们得去明白其深层得含义，理解自己为什么要这样去操作。</p>\n<p><strong>我们在去写代码之前，一定要先把状态转移到dp数组上进行具体得模拟一遍，做到心里有数</strong></p>\n<p>通过不了时，请给自己发出以下三个疑问：</p>\n<blockquote>\n<p>这道题目我举例推导状态转移公式了么？<br />\n我打印dp数组的日志了么？<br />\n打印出来了dp数组和我想的一样么？</p>\n</blockquote>\n<p>通过上述文字，想必我们对动态规划已经有了初步得了解，那我们就来试试下面这道题目把！</p>\n<h1 id=\"小题一道\"><a class=\"markdownIt-Anchor\" href=\"#小题一道\"></a> 小题一道</h1>\n<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h2>\n<p>斐波那契数，通常用<code>F(n)</code>表示，形成的序列称为 斐波那契数列 。该数列由<code>0</code>和<code>1</code>开始，后面的每一项数字都是前面两项数字的和。也就是： <code>F(0) = 0，F(1) = 1 F(n) = F(n - 1) + F(n - 2)</code>，其中<code>n &gt; 1</code>给你<code>n</code>，请计算<code>F(n)</code>。<br />\n示例1</p>\n<ul>\n<li>输入：2</li>\n<li>输出：1</li>\n<li>解释：F(2) = F(1) + F(0) = 1 + 0 = 1</li>\n</ul>\n<p>示例2</p>\n<ul>\n<li>输入：3</li>\n<li>输出：2</li>\n<li>解释：F(3) = F(2) + F(1) = 1 + 1 = 2</li>\n</ul>\n<p>示例3</p>\n<ul>\n<li>输入：4</li>\n<li>输出：3</li>\n<li>解释：F(4) = F(3) + F(2) = 2 + 1 = 3</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1f5411K7mo/?vd_source=fd148478f48deef97bac8ef404e7216f\">《代码随想录》算法公开课</a><br />\n<a href=\"https://leetcode.cn/problems/fibonacci-number/description/\">力扣题目链接</a></p>\n</blockquote>\n<h2 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h2>\n<ol>\n<li>确定dp数组以及下标的含义<br />\ndp[i]的定义为：第i个数的斐波那契数值是dp[i]</li>\n<li>确定递推公式<br />\n状态转移方程 dp[i] = dp[i - 1] + dp[i - 2];</li>\n<li>dp数组如何初始化<br />\n题目已经告诉我们：dp[0]=0, dp[1]=1</li>\n<li>确定遍历顺序<br />\n从递归公式dp[i] = dp[i - 1] + dp[i - 2];中可以看出，dp[i]是依赖 dp[i - 1] 和 dp[i - 2]，那么遍历的顺序一定是从前到后遍历的</li>\n<li>举例推导dp数组<br />\n按照这个递推公式dp[i] = dp[i - 1] + dp[i - 2]，我们来推导一下，当N为8的时候，dp数组应该是如下的数列：<code>0 1 1 2 3 5 8 13 21</code></li>\n</ol>\n<blockquote>\n<p>注：如果代码写出来，发现结果不对，就把dp数组打印出来看看和我们推导的数列是不是一致的。</p>\n</blockquote>\n<h2 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h2>\n<h3 id=\"完整dp解题代码\"><a class=\"markdownIt-Anchor\" href=\"#完整dp解题代码\"></a> 完整dp解题代码</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">fib</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> n;             </span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; index &lt;= n; index++)&#123;</span><br><span class=\"line\">            dp[index] = dp[index - <span class=\"number\">1</span>] + dp[index - <span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简化后的dp解题代码\"><a class=\"markdownIt-Anchor\" href=\"#简化后的dp解题代码\"></a> 简化后的dp解题代码</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">fib</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, b = <span class=\"number\">1</span>, c = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            c = a + b;</span><br><span class=\"line\">            a = b;</span><br><span class=\"line\">            b = c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"递归解题代码\"><a class=\"markdownIt-Anchor\" href=\"#递归解题代码\"></a> 递归解题代码</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">fib</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &lt; <span class=\"number\">2</span>)<span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fib(n-<span class=\"number\">1</span>) + fib(n-<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["动态规划"],"tags":["Java","新手教程","斐波那契数"]},{"title":"摆动序列","url":"/2024/11/28/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97/","content":"<h1 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h1>\n<p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。</p>\n<p>给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。</p>\n<p>例如，<code>[1,7,4,9,2,5]</code>是一个摆动序列，因为差值 <code>(6,-3,5,-7,3) </code>是正负交替出现的。相反, <code>[1,4,7,2,5]</code> 和<code>[1,7,4,5,5]</code>不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</p>\n<p>示例1</p>\n<ul>\n<li>输入: [1,7,4,9,2,5]</li>\n<li>输出: 6</li>\n<li>解释: 整个序列均为摆动序列。</li>\n</ul>\n<p>示例2</p>\n<ul>\n<li>输入: [1,17,5,10,13,15,10,5,16,8]</li>\n<li>输出: 7</li>\n<li>解释: 这个序列包含几个长度为 7 摆动序列，其中一个可为[1,17,10,13,10,16,8]。</li>\n</ul>\n<p>示例3</p>\n<ul>\n<li>输入: [1,2,3,4,5,6,7,8,9]</li>\n<li>输出: 2</li>\n</ul>\n<p><a href=\"https://www.bilibili.com/video/BV17M411b7NS/\">《代码随想录》算法公开课</a><br />\n<a href=\"https://leetcode.cn/problems/wiggle-subsequence/description/\">力扣题目链接</a></p>\n<h1 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h1>\n<h2 id=\"题意分析\"><a class=\"markdownIt-Anchor\" href=\"#题意分析\"></a> 题意分析</h2>\n<blockquote>\n<p>首先，题目需要的是摆动序列，即先将数列进行列出，如下图<br />\n<img src=\"/img/timu/376-1.jpg\" alt=\"376摆动序列\" title=\"摆动序列\" /><br />\n<img src=\"/img/timu/376-2.jpg\" alt=\"376-1摆动序列\" title=\"摆动序列\" /><br />\n摆动序列即数列列出的形状如同波浪线一般，在该题中我们可以删去某些元素再进行排序，由贪心算法的每次取局部最优，得到全局最优，我们每次都只取峰值元素，即当有片段单调递增或单调递减时，我们支取最高点或者最低点。<br />\n如示例2：<br />\n<img src=\"/img/timu/376-3.png\" alt=\"376-2摆动序列\" title=\"摆动序列\" /></p>\n<ul>\n<li><strong>局部最优：删除单调坡度上的节点（不包括单调坡度两端的节点），那么这个坡度就可以有两个局部峰值。</strong></li>\n<li><strong>整体最优：整个序列有最多的局部峰值，从而达到最长摆动序列。</strong></li>\n</ul>\n</blockquote>\n<h2 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\"></a> 注意</h2>\n<ol>\n<li>上下坡中有平坡<br />\n例如：[1,2,2,2,1]<br />\n<img src=\"/img/timu/376-4.png\" alt=\"摆动序列\" title=\"摆动序列\" /></li>\n</ol>\n<ul>\n<li>当我们遇到平波时，相同的元素支取一次就行了，此时同一一下规则，删除左边的相同元素，即<code>(prediff &gt;= 0 &amp;&amp; curdiff &lt; 0 ) || (prediff &lt;= 0 &amp;&amp; curdiff &gt; 0)</code>。</li>\n</ul>\n<blockquote>\n<p>注：<code>curdiff</code>为当前元素与前一元素的差值，<code>prediff</code>为前一元素与其前一元素的差值。</p>\n</blockquote>\n<ol start=\"2\">\n<li>数组首尾两端</li>\n</ol>\n<ul>\n<li>对于这种特殊情况我们可以定死规则，即当数组大小为2时，<code>nums[0] != nums[1]</code>即返回2</li>\n</ul>\n<ol start=\"3\">\n<li>单调坡中有平坡<br />\n例如：[1,2,2,2,3,4]<br />\n<img src=\"/img/timu/376-5.png\" alt=\"摆动序列\" title=\"摆动序列\" /></li>\n</ol>\n<ul>\n<li>对于这种情况我们只需要规定<code>prediff</code>的更新时间即可，即当有坡度变化时才去更新<code>prediff</code>的值。</li>\n</ul>\n<h2 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">wiggleMaxLength</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums.length;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//长度为2，且元素不相等时，为摆动序列，直接返回2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.length == <span class=\"number\">2</span> &amp;&amp; (nums[<span class=\"number\">0</span>] != nums[<span class=\"number\">1</span>]))<span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">//当前差值</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">curDiff</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//上一个差值</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">preDiff</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//记录返回值，即摆动序列长度，从索引1处开始，则至少有一个数满足题意</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//得到当前差值</span></span><br><span class=\"line\">            curDiff = nums[i] - nums[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"comment\">//如果当前差值和上一个差值为一正一负</span></span><br><span class=\"line\">            <span class=\"comment\">//等于0的情况表示初始时的preDiff</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((curDiff &gt; <span class=\"number\">0</span> &amp;&amp; preDiff &lt;= <span class=\"number\">0</span>) || (curDiff &lt; <span class=\"number\">0</span> &amp;&amp; preDiff &gt;= <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">                preDiff = curDiff;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["贪心算法"],"tags":["Java","贪心算法"]},{"title":"动态规划-01背包理论基础(二)","url":"/2024/12/06/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-01%E8%83%8C%E5%8C%85%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%802/","content":"<h1 id=\"动态规划-01背包理论基础二\"><a class=\"markdownIt-Anchor\" href=\"#动态规划-01背包理论基础二\"></a> 动态规划-01背包理论基础(二)</h1>\n<p>上一篇我们提到了01背包的二维的dp数组，这篇我们就来说一说01背包的一维数组，也就是滚动数组，为什么叫滚动数组看完接下来的分析你就懂了！</p>\n<p>那么我们通过01背包，来彻底讲一讲滚动数组！<br />\n接下来还是用如下这个例子来进行讲解：</p>\n<blockquote>\n<p>weight = [1, 3, 4]<br />\nvalue = [15, 20, 30]</p>\n</blockquote>\n<h2 id=\"一维dp数组滚动数组\"><a class=\"markdownIt-Anchor\" href=\"#一维dp数组滚动数组\"></a> 一维dp数组（滚动数组）</h2>\n<p>对于背包问题其实状态都是可以压缩的!</p>\n<p>在使用二维数组的时候，递推公式：<code>dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i])</code>;</p>\n<p>其实可以发现如果把dp[i - 1]那一层拷贝到dp[i]上，即利用上一层的数据将二维表达式里的dp[i-1][j]直接用上一次遍历的结果，即数组进行了一个滚动操作，表达式完全可以是：<code>dp[i][j] = max(dp[i][j], dp[i][j - weight[i]] + value[i])</code>;</p>\n<p>与其把dp[i - 1]这一层拷贝到dp[i]上，不如只用一个一维数组了，只用dp[j]（一维数组，也可以理解是一个滚动数组）</p>\n<blockquote>\n<p>注：我们千万不能忘记dp[i][j]的含义！dp[i][j] 表示从下标为[0-i]的物品里任意取，放进容量为j的背包，价值总和最大是多少。</p>\n</blockquote>\n<h2 id=\"动态规划五步曲\"><a class=\"markdownIt-Anchor\" href=\"#动态规划五步曲\"></a> 动态规划五步曲</h2>\n<ol>\n<li>确定dp数组的定义</li>\n</ol>\n<p>dp[j]表示：容量为j的背包，所背的物品价值可以最大为dp[j]。</p>\n<ol start=\"2\">\n<li>一维dp数组的递推公式</li>\n</ol>\n<p>二维dp数组的递推公式为： dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);</p>\n<p>以下为分析：</p>\n<ul>\n<li>\n<p>dp[j]为 容量为j的背包所背的最大价值。</p>\n</li>\n<li>\n<p>dp[j]可以通过dp[j - weight[i]]推导出来，dp[j - weight[i]]表示容量为j - weight[i]的背包所背的最大价值。</p>\n</li>\n<li>\n<p>dp[j - weight[i]] + value[i] 表示 容量为 [j - 物品i重量] 的背包加上物品i的价值。（也就是容量为j的背包，放入物品i了之后的价值即：dp[j]）</p>\n</li>\n<li>\n<p>此时dp[j]有两个选择，一个是取自己dp[j] 相当于 二维dp数组中的dp[i-1][j]，即不放物品i，一个是取dp[j - weight[i]] + value[i]，即放物品i，指定是取最大的，毕竟是求最大价值。</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>一维dp数组如何初始化</li>\n</ol>\n<p>dp[j]表示：容量为j的背包，所背的物品价值可以最大为dp[j]，那么dp[0]就应该是0，因为背包容量为0所背的物品的最大价值就是0。</p>\n<p>那么dp数组除了下标0的位置，初始为0，其他下标应该初始化多少呢？</p>\n<p>看一下递归公式：<code>dp[j] = max(dp[j], dp[j - weight[i]] + value[i])</code>;</p>\n<p>dp数组在推导的时候一定是取价值最大的数，如果题目给的价值都是正整数那么非0下标都初始化为0就可以了。</p>\n<p>这样才能让dp数组在递归公式的过程中取的最大的价值，而不是被初始值覆盖了。</p>\n<p>那么我假设物品价值都是大于0的，所以dp数组初始化的时候，都初始为0就可以了。</p>\n<ol start=\"4\">\n<li>一维dp数组遍历顺序</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; weight.size(); i++) &#123; <span class=\"comment\">// 遍历物品</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> bagWeight; j &gt;= weight[i]; j--) &#123; <span class=\"comment\">// 遍历背包容量</span></span><br><span class=\"line\">        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里大家发现和二维dp的写法中，遍历背包的顺序是不一样的！二维dp遍历的时候，背包容量是从小到大，而一维dp遍历的时候，背包是从大到小。</p>\n</blockquote>\n<p>为什么呢？**倒序遍历是为了保证物品i只被放入一次！**但如果一旦正序遍历了，那么物品0就会被重复加入多次！</p>\n<ul>\n<li>举个例子：物品0的重量weight[0] = 1，价值value[0] = 15</li>\n</ul>\n<p>如果正序遍历</p>\n<p>dp[1] = dp[1 - weight[0]] + value[0] = 15<br />\ndp[2] = dp[2 - weight[0]] + value[0] = 30<br />\n此时dp[2]就已经是30了，意味着物品0，被放入了两次，所以不能正序遍历。</p>\n<p>为什么倒序遍历，就可以保证物品只放入一次呢？</p>\n<p>倒序就是先算dp[2]<br />\ndp[2] = dp[2 - weight[0]] + value[0] = 15 （dp数组已经都初始化为0）<br />\ndp[1] = dp[1 - weight[0]] + value[0] = 15</p>\n<p>所以从后往前循环，每次取得状态不会和之前取得状态重合，这样每种物品就只取一次了。</p>\n<p><strong>再来看看两个嵌套for循环的顺序，代码中是先遍历物品嵌套遍历背包容量，那可不可以先遍历背包容量嵌套遍历物品呢？</strong></p>\n<p><strong>不可以！</strong></p>\n<p>因为一维dp的写法，背包容量一定是要倒序遍历（原因上面已经讲了），如果遍历背包容量放在上一层，那么每个dp[j]就只会放入一个物品，即：背包里只放入了一个物品。</p>\n<p>**所以一维dp数组的背包在遍历顺序上和二维其实是有很大差异的！**这一点大家一定要注意。</p>\n<ol start=\"5\">\n<li>举例推导dp数组</li>\n</ol>\n<p>一维dp，分别用物品0，物品1，物品2 来遍历背包，最终得到结果如下：<br />\n<img src=\"/img/timu/01-2-1.png\" alt=\"01背包\" title=\"01背包\" /><br />\n像不像二维数组的每条都滚动展示！</p>\n<blockquote>\n<p><a href=\"https://kamacoder.com/problempage.php?pid=1046\">01背包原题</a><br />\n<a href=\"https://www.bilibili.com/video/BV1BU4y177kY/?vd_source=fd148478f48deef97bac8ef404e7216f\">《代码随想录》算法公开课</a></p>\n</blockquote>\n<h2 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 读取 M 和 N</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">M</span> <span class=\"operator\">=</span> scanner.nextInt();  <span class=\"comment\">// 研究材料的数量</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">N</span> <span class=\"operator\">=</span> scanner.nextInt();  <span class=\"comment\">// 行李空间的大小</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] costs = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[M];   <span class=\"comment\">// 每种材料的空间占用</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] values = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[M];  <span class=\"comment\">// 每种材料的价值</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 输入每种材料的空间占用</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; M; i++) &#123;</span><br><span class=\"line\">            costs[i] = scanner.nextInt();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 输入每种材料的价值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; M; j++) &#123;</span><br><span class=\"line\">            values[j] = scanner.nextInt();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建一个动态规划数组 dp，初始值为 0</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[N + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 外层循环遍历每个类型的研究材料</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; M; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 内层循环从 N 空间逐渐减少到当前研究材料所占空间</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> N; j &gt;= costs[i]; j--) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 考虑当前研究材料选择和不选择的情况，选择最大值</span></span><br><span class=\"line\">                dp[j] = Math.max(dp[j], dp[j - costs[i]] + values[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 输出 dp[N]，即在给定 N 行李空间可以携带的研究材料的最大价值</span></span><br><span class=\"line\">        System.out.println(dp[N]);</span><br><span class=\"line\"></span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["01背包"],"tags":["Java","dp","一维数组"]},{"title":"最大子序和","url":"/2024/11/29/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/","content":"<h1 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h1>\n<p>给定一个整数数组<code>nums</code>，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<p>示例1</p>\n<ul>\n<li>输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</li>\n<li>输出：6</li>\n<li>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</li>\n</ul>\n<p>示例2</p>\n<ul>\n<li>输入：nums = [1]</li>\n<li>输出：1</li>\n</ul>\n<p>示例3<br />\n输入：nums = [5,4,-1,7,8]<br />\n输出：23</p>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1aY4y1Z7ya/\">《代码随想录》算法公开课</a><br />\n<a href=\"https://leetcode.cn/problems/maximum-subarray/description/\">力扣题目链接</a></p>\n</blockquote>\n<h1 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h1>\n<h2 id=\"暴力解法\"><a class=\"markdownIt-Anchor\" href=\"#暴力解法\"></a> 暴力解法</h2>\n<ul>\n<li>暴力解法的思路，第一层<code>for</code>就是设置起始位置，第二层 <code>for</code>循环遍历数组寻找最大值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxSubArray</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先将结果设为最小整数，以便于后续结果做对比不被影响</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> Integer.MIN_VALUE;</span><br><span class=\"line\">        <span class=\"comment\">//单个子序列的总和</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//每次进行新一轮遍历时，都重置子序列和</span></span><br><span class=\"line\">            count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i; j &lt; nums,length; j++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//固定外层nums[i]移动j指针，寻找最大子序列和</span></span><br><span class=\"line\">                count += nums[j];</span><br><span class=\"line\">                <span class=\"comment\">//当前子序列和大于res时，将其count值赋给res</span></span><br><span class=\"line\">                res = count &gt; res ? count : res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：此方法的时间复杂度为<code>O(n^2)</code>，空间复杂度为<code>O(1)</code>，一般会超过题目给定的时间限制，提示超时错误</p>\n</blockquote>\n<h2 id=\"贪心算法\"><a class=\"markdownIt-Anchor\" href=\"#贪心算法\"></a> 贪心算法</h2>\n<p>所谓贪心算法，就是在子序和为负数时，直接舍弃当前<code>count</code>，对其<code>count</code>进行重新赋值<code>0</code>的操作，因为负数只会拉低综合，这便是局部最优。</p>\n<p><strong>从代码角度上来讲：遍历<code>nums</code>，从头开始用<code>count</code>累积，如果<code>count</code>一旦加上<code>nums[i]</code>变为负数，那么就应该从<code>nums[i+1]</code>开始从<code>0</code>累积<code>count</code>了，因为已经变为负数的<code>count</code>，只会拖累总和。</strong></p>\n<ul>\n<li><strong>注：这相当于是暴力解法中的不断调整最大子序和区间的起始位置。</strong></li>\n</ul>\n<h3 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxSubArray</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//当长度为1时直接返回其值便是最大子序和</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将返回值初始为整型最小值，以便后续赋值</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> Integer.MIN_VALUE;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">            count += nums[i];</span><br><span class=\"line\">            <span class=\"comment\">//先对比取出最大值，再判断count是否&lt;0，这么做是为了防止最大值便是负数导致遗漏</span></span><br><span class=\"line\">            max = Math.max(max, count); </span><br><span class=\"line\">            <span class=\"comment\">// 相当于重置最大子序起始位置，因为遇到负数一定是拉低总和</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                count = <span class=\"number\">0</span>; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["贪心算法"],"tags":["Java","贪心算法"]},{"title":"贪心算法-分发饼干","url":"/2024/11/28/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/","content":"<h1 id=\"什么是贪心算法\"><a class=\"markdownIt-Anchor\" href=\"#什么是贪心算法\"></a> 什么是贪心算法</h1>\n<ul>\n<li>贪心的本质是选择每一阶段的局部最优，从而达到全局最优。</li>\n<li>例如有一堆不同数额的钞票，每次只能拿一张，怎么拿能取得最大数额的钞票。\n<ul>\n<li>方法：将钞票从大到小进行排序，每次都拿走当前堆里最大面额的钞票，即可在指定拿取次数中获得最大数额的钞票。</li>\n<li>例如：[100, 100, 50, 20, 50, 1, 10]\n<ul>\n<li>排序后为：[100, 100, 50, 50, 20, 10, 1]</li>\n<li>依次取数组中的最大值进行累加</li>\n<li>取完指定次数后，累加值即为最优解</li>\n</ul>\n</li>\n<li>在这个过程中，每次取最大面额的钞票为<code>局部最优</code>，通过每次获得<code>局部最优</code>得到的结果即为<code>全局最优</code>。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>注意：贪心算法并没有固定套路，也没有固定策略，贪心算法有时候就是常识的推导，所以认为本应该这么做！</p>\n</blockquote>\n<h1 id=\"小题一道-分发饼干\"><a class=\"markdownIt-Anchor\" href=\"#小题一道-分发饼干\"></a> 小题一道-分发饼干</h1>\n<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h2>\n<p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p>\n<p>对每个孩子<code>i</code>，都有一个胃口值<code>g[i]</code>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干<code>j</code>，都有一个尺寸 <code>s[j]</code> 。如果 <code>s[j] &gt;= g[i]</code>，我们可以将这个饼干<code>j</code> 分配给孩子<code>i</code>，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>\n<blockquote>\n<p>示例1</p>\n<ul>\n<li>输入: g = [1,2,3], s = [1,1]</li>\n<li>输出: 1</li>\n<li>解释:你有三个孩子和两块小饼干，3 个孩子的胃口值分别是：1,2,3。虽然你有两块小饼干，由于他们的尺寸都是 1，你只能让胃口值是 1 的孩子满足。所以你应该输出 1。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>示例2</p>\n<ul>\n<li>输入: g = [1,2], s = [1,2,3]</li>\n<li>输出: 2</li>\n<li>解释:你有两个孩子和三块小饼干，2 个孩子的胃口值分别是 1,2。你拥有的饼干数量和尺寸都足以让所有孩子满足。所以你应该输出 2.</li>\n</ul>\n</blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1MM411b7cq/\">《代码随想录》算法公开课</a></p>\n<p><a href=\"https://leetcode.cn/problems/assign-cookies/description/\">力扣题目链接</a></p>\n<h2 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h2>\n<ul>\n<li>首先，每个孩子只能获得一块饼干，大尺寸的饼干能满足对于饼干需求小于等于该尺寸的孩子</li>\n<li>为了减少饼干的浪费，这里我们优先考虑将大尺寸的饼干给到胃口大的孩子</li>\n<li>即此处的<code>局部最优</code>便是，将大尺寸的饼干分给胃口大的孩子，<code>全局最优</code>便是尽量喂饱更多孩子<br />\n<img src=\"/img/timu/455-1.png\" alt=\"分发饼干-代码随想录\" title=\"分发饼干\" /></li>\n</ul>\n<h1 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h1>\n<h2 id=\"优先考虑胃口先喂饱大胃口的孩子\"><a class=\"markdownIt-Anchor\" href=\"#优先考虑胃口先喂饱大胃口的孩子\"></a> 优先考虑胃口，先喂饱大胃口的孩子</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//优先考虑胃口，先喂饱大胃口</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findContentChildren</span><span class=\"params\">(<span class=\"type\">int</span>[] g, <span class=\"type\">int</span>[] s)</span> &#123;</span><br><span class=\"line\">        Arrays.sort(g);<span class=\"comment\">//对两个数组进行升序排序</span></span><br><span class=\"line\">        Arrays.sort(s);</span><br><span class=\"line\">        <span class=\"comment\">//count统计被喂饱的孩子</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//饼干尺寸从大到小进行与孩子胃口匹配</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> s.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历胃口</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> g.length - <span class=\"number\">1</span>; index &gt;= <span class=\"number\">0</span>; index--) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//start &gt;= 0为了防止数组越界错误</span></span><br><span class=\"line\">            <span class=\"comment\">//当饼干尺寸满足孩子时，将饼干分给g[index],然后饼干向更小的尺寸移动，孩子也向胃口更小的移动，如果孩子胃口大于饼干尺寸，则无法满足该孩子，直接向胃口小的孩子移动</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(start &gt;= <span class=\"number\">0</span> &amp;&amp; g[index] &lt;= s[start]) &#123;</span><br><span class=\"line\">                start--;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"优先考虑饼干小饼干先喂饱小胃口\"><a class=\"markdownIt-Anchor\" href=\"#优先考虑饼干小饼干先喂饱小胃口\"></a> 优先考虑饼干，小饼干先喂饱小胃口</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findContentChildren</span><span class=\"params\">(<span class=\"type\">int</span>[] g, <span class=\"type\">int</span>[] s)</span> &#123;</span><br><span class=\"line\">        Arrays.sort(g);</span><br><span class=\"line\">        Arrays.sort(s);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; s.length &amp;&amp; start &lt; g.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] &gt;= g[start]) &#123;</span><br><span class=\"line\">                start++;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["贪心算法"],"tags":["Java","贪心算法"]},{"title":"跳跃游戏","url":"/2024/11/29/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/","content":"<h1 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h1>\n<p>给定一个非负整数数组，你最初位于数组的第一个位置。数组中的每个元素代表你在该位置可以跳跃的最大长度。判断你是否能够到达最后一个位置。</p>\n<p>示例1</p>\n<ul>\n<li>输入: [2,3,1,1,4]</li>\n<li>输出: true</li>\n<li>解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。</li>\n</ul>\n<p>示例2</p>\n<ul>\n<li>输入: [3,2,1,0,4]</li>\n<li>输出: false</li>\n<li>解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。</li>\n</ul>\n<p>示例3</p>\n<ul>\n<li>输入: [0]</li>\n<li>输出: true</li>\n<li>解释: 跳入的第一步就到终点了</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1VG4y1X7kB/?vd_source=fd148478f48deef97bac8ef404e7216f\">《代码随想录》算法公开课</a><br />\n<a href=\"https://leetcode.cn/problems/jump-game/description/\">力扣题目链接</a></p>\n</blockquote>\n<h1 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h1>\n<ul>\n<li>每次跳跃都使其覆盖的范围为给定步数里覆盖的最大范围</li>\n<li>直到其到达终点，或所覆盖范围超过终点</li>\n<li>此时的局部最优便是：每次所跳步数可以使下一次跳覆盖最大范围</li>\n<li>全局最优便是：每次跳最优达到步数最大</li>\n<li>最后判断全局最优的结果能不能覆盖终点</li>\n</ul>\n<p><img src=\"/img/timu/55-1.png\" alt=\"55-1跳跃游戏\" title=\"跳跃游戏\" /></p>\n<h1 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canJump</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//覆盖范围, 初始覆盖范围应该是0，因为下面的迭代是从下标0开始的</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">coverRange</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//在覆盖范围内更新最大的覆盖范围</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= coverRange; i++) &#123;</span><br><span class=\"line\">            coverRange = Math.max(coverRange, i + nums[i]);</span><br><span class=\"line\">            <span class=\"comment\">//覆盖范围超过数组长度，即可达到终点，结束判断</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (coverRange &gt;= nums.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["二叉树"],"tags":["Java","贪心算法"]}]